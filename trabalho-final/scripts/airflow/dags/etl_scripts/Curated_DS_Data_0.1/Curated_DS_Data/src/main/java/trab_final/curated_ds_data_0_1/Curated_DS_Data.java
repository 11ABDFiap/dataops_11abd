// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package trab_final.curated_ds_data_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Curated_DS_Data Purpose: <br>
 * Description: Cria um job para popular a camada acurada  report BI <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class Curated_DS_Data implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(LocalPath != null){
				
					this.setProperty("LocalPath", LocalPath.toString());
				
			}
			
			if(reportBI != null){
				
					this.setProperty("reportBI", reportBI.toString());
				
			}
			
			if(reportDS != null){
				
					this.setProperty("reportDS", reportDS.toString());
				
			}
			
			if(sampleDS != null){
				
					this.setProperty("sampleDS", sampleDS.toString());
				
			}
			
			if(sampleTest != null){
				
					this.setProperty("sampleTest", sampleTest.toString());
				
			}
			
			if(sampleTrain != null){
				
					this.setProperty("sampleTrain", sampleTrain.toString());
				
			}
			
			if(Address_Harmonized != null){
				
					this.setProperty("Address_Harmonized", Address_Harmonized.toString());
				
			}
			
			if(Customer_Harmonized != null){
				
					this.setProperty("Customer_Harmonized", Customer_Harmonized.toString());
				
			}
			
			if(CustomerAddress_Harmonized != null){
				
					this.setProperty("CustomerAddress_Harmonized", CustomerAddress_Harmonized.toString());
				
			}
			
			if(Product_Harmonized != null){
				
					this.setProperty("Product_Harmonized", Product_Harmonized.toString());
				
			}
			
			if(ProductCategory_Harmonized != null){
				
					this.setProperty("ProductCategory_Harmonized", ProductCategory_Harmonized.toString());
				
			}
			
			if(ProductDescription_Harmonized != null){
				
					this.setProperty("ProductDescription_Harmonized", ProductDescription_Harmonized.toString());
				
			}
			
			if(ProductModel_Harmonized != null){
				
					this.setProperty("ProductModel_Harmonized", ProductModel_Harmonized.toString());
				
			}
			
			if(ProductModelProductDescription_Harmonized != null){
				
					this.setProperty("ProductModelProductDescription_Harmonized", ProductModelProductDescription_Harmonized.toString());
				
			}
			
			if(SalesOrderDetail_Harmonized != null){
				
					this.setProperty("SalesOrderDetail_Harmonized", SalesOrderDetail_Harmonized.toString());
				
			}
			
			if(SalesOrderHeader_Harmonized != null){
				
					this.setProperty("SalesOrderHeader_Harmonized", SalesOrderHeader_Harmonized.toString());
				
			}
			
			if(Address_Raw != null){
				
					this.setProperty("Address_Raw", Address_Raw.toString());
				
			}
			
			if(Customer_Raw != null){
				
					this.setProperty("Customer_Raw", Customer_Raw.toString());
				
			}
			
			if(CustomerAddress_Raw != null){
				
					this.setProperty("CustomerAddress_Raw", CustomerAddress_Raw.toString());
				
			}
			
			if(Product_Raw != null){
				
					this.setProperty("Product_Raw", Product_Raw.toString());
				
			}
			
			if(ProductCategory_Raw != null){
				
					this.setProperty("ProductCategory_Raw", ProductCategory_Raw.toString());
				
			}
			
			if(ProductDescription_Raw != null){
				
					this.setProperty("ProductDescription_Raw", ProductDescription_Raw.toString());
				
			}
			
			if(ProductModel_Raw != null){
				
					this.setProperty("ProductModel_Raw", ProductModel_Raw.toString());
				
			}
			
			if(ProductModelProductDescription_Raw != null){
				
					this.setProperty("ProductModelProductDescription_Raw", ProductModelProductDescription_Raw.toString());
				
			}
			
			if(SalesOrderDetail_Raw != null){
				
					this.setProperty("SalesOrderDetail_Raw", SalesOrderDetail_Raw.toString());
				
			}
			
			if(SalesOrderHeader_Raw != null){
				
					this.setProperty("SalesOrderHeader_Raw", SalesOrderHeader_Raw.toString());
				
			}
			
		}

public String LocalPath;
public String getLocalPath(){
	return this.LocalPath;
}
public String reportBI;
public String getReportBI(){
	return this.reportBI;
}
public String reportDS;
public String getReportDS(){
	return this.reportDS;
}
public String sampleDS;
public String getSampleDS(){
	return this.sampleDS;
}
public String sampleTest;
public String getSampleTest(){
	return this.sampleTest;
}
public String sampleTrain;
public String getSampleTrain(){
	return this.sampleTrain;
}
public String Address_Harmonized;
public String getAddress_Harmonized(){
	return this.Address_Harmonized;
}
public String Customer_Harmonized;
public String getCustomer_Harmonized(){
	return this.Customer_Harmonized;
}
public String CustomerAddress_Harmonized;
public String getCustomerAddress_Harmonized(){
	return this.CustomerAddress_Harmonized;
}
public String Product_Harmonized;
public String getProduct_Harmonized(){
	return this.Product_Harmonized;
}
public String ProductCategory_Harmonized;
public String getProductCategory_Harmonized(){
	return this.ProductCategory_Harmonized;
}
public String ProductDescription_Harmonized;
public String getProductDescription_Harmonized(){
	return this.ProductDescription_Harmonized;
}
public String ProductModel_Harmonized;
public String getProductModel_Harmonized(){
	return this.ProductModel_Harmonized;
}
public String ProductModelProductDescription_Harmonized;
public String getProductModelProductDescription_Harmonized(){
	return this.ProductModelProductDescription_Harmonized;
}
public String SalesOrderDetail_Harmonized;
public String getSalesOrderDetail_Harmonized(){
	return this.SalesOrderDetail_Harmonized;
}
public String SalesOrderHeader_Harmonized;
public String getSalesOrderHeader_Harmonized(){
	return this.SalesOrderHeader_Harmonized;
}
public String Address_Raw;
public String getAddress_Raw(){
	return this.Address_Raw;
}
public String Customer_Raw;
public String getCustomer_Raw(){
	return this.Customer_Raw;
}
public String CustomerAddress_Raw;
public String getCustomerAddress_Raw(){
	return this.CustomerAddress_Raw;
}
public String Product_Raw;
public String getProduct_Raw(){
	return this.Product_Raw;
}
public String ProductCategory_Raw;
public String getProductCategory_Raw(){
	return this.ProductCategory_Raw;
}
public String ProductDescription_Raw;
public String getProductDescription_Raw(){
	return this.ProductDescription_Raw;
}
public String ProductModel_Raw;
public String getProductModel_Raw(){
	return this.ProductModel_Raw;
}
public String ProductModelProductDescription_Raw;
public String getProductModelProductDescription_Raw(){
	return this.ProductModelProductDescription_Raw;
}
public String SalesOrderDetail_Raw;
public String getSalesOrderDetail_Raw(){
	return this.SalesOrderDetail_Raw;
}
public String SalesOrderHeader_Raw;
public String getSalesOrderHeader_Raw(){
	return this.SalesOrderHeader_Raw;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Curated_DS_Data";
	private final String projectName = "TRAB_FINAL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Curated_DS_Data.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Curated_DS_Data.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileDelete_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileDelete_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileDelete_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileDelete_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterColumns_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSampleRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSampleRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSampleRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterColumns_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterColumns_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterColumns_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterColumns_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterColumns_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterColumns_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tFileDelete_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileDelete_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_1", false);
		start_Hash.put("tFileDelete_1", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_1";

	
		int tos_count_tFileDelete_1 = 0;
		

 



/**
 * [tFileDelete_1 begin ] stop
 */
	
	/**
	 * [tFileDelete_1 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

class DeleteFoldertFileDelete_1{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
	java.io.File path_tFileDelete_1=new java.io.File(context.LocalPath+context.reportDS);
	if(path_tFileDelete_1.exists()){
		if(path_tFileDelete_1.isFile()){
	    	if(path_tFileDelete_1.delete()){
	    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
	    	}else{
	    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
	    	}
		}else if(path_tFileDelete_1.isDirectory()){ 
	    	DeleteFoldertFileDelete_1 dftFileDelete_1 = new DeleteFoldertFileDelete_1();
	    	if(dftFileDelete_1.delete(path_tFileDelete_1)){
	    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "Path deleted.");
	    	}else{
	    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "No path deleted.");
	    	}
		}
	}else{
		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File or path does not exist or is invalid.");
    }
    globalMap.put("tFileDelete_1_DELETE_PATH",context.LocalPath+context.reportDS);
    
     
 

 


	tos_count_tFileDelete_1++;

/**
 * [tFileDelete_1 main ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_1 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

ok_Hash.put("tFileDelete_1", true);
end_Hash.put("tFileDelete_1", System.currentTimeMillis());




/**
 * [tFileDelete_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileDelete_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tFileDelete_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_1 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileDelete_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileDelete_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_2", false);
		start_Hash.put("tFileDelete_2", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_2";

	
		int tos_count_tFileDelete_2 = 0;
		

 



/**
 * [tFileDelete_2 begin ] stop
 */
	
	/**
	 * [tFileDelete_2 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 

class DeleteFoldertFileDelete_2{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_2=new java.io.File(context.LocalPath+context.sampleDS);
    if(file_tFileDelete_2.exists()&& file_tFileDelete_2.isFile()){
    	if(file_tFileDelete_2.delete()){
    		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_2_CURRENT_STATUS", "No file deleted.");
		}
	}else{
		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File does not exist or is invalid.");
	}
	globalMap.put("tFileDelete_2_DELETE_PATH",context.LocalPath+context.sampleDS);
    
     
 

 


	tos_count_tFileDelete_2++;

/**
 * [tFileDelete_2 main ] stop
 */
	
	/**
	 * [tFileDelete_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 



/**
 * [tFileDelete_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 



/**
 * [tFileDelete_2 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_2 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 

ok_Hash.put("tFileDelete_2", true);
end_Hash.put("tFileDelete_2", System.currentTimeMillis());




/**
 * [tFileDelete_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileDelete_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tFileDelete_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_2 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 



/**
 * [tFileDelete_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 1);
	}
	

public void tFileDelete_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileDelete_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_3", false);
		start_Hash.put("tFileDelete_3", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_3";

	
		int tos_count_tFileDelete_3 = 0;
		

 



/**
 * [tFileDelete_3 begin ] stop
 */
	
	/**
	 * [tFileDelete_3 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_3";

	

 

class DeleteFoldertFileDelete_3{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
	java.io.File path_tFileDelete_3=new java.io.File(context.LocalPath+context.sampleTest);
	if(path_tFileDelete_3.exists()){
		if(path_tFileDelete_3.isFile()){
	    	if(path_tFileDelete_3.delete()){
	    		globalMap.put("tFileDelete_3_CURRENT_STATUS", "File deleted.");
	    	}else{
	    		globalMap.put("tFileDelete_3_CURRENT_STATUS", "No file deleted.");
	    	}
		}else if(path_tFileDelete_3.isDirectory()){ 
	    	DeleteFoldertFileDelete_3 dftFileDelete_3 = new DeleteFoldertFileDelete_3();
	    	if(dftFileDelete_3.delete(path_tFileDelete_3)){
	    		globalMap.put("tFileDelete_3_CURRENT_STATUS", "Path deleted.");
	    	}else{
	    		globalMap.put("tFileDelete_3_CURRENT_STATUS", "No path deleted.");
	    	}
		}
	}else{
		globalMap.put("tFileDelete_3_CURRENT_STATUS", "File or path does not exist or is invalid.");
    }
    globalMap.put("tFileDelete_3_DELETE_PATH",context.LocalPath+context.sampleTest);
    
     
 

 


	tos_count_tFileDelete_3++;

/**
 * [tFileDelete_3 main ] stop
 */
	
	/**
	 * [tFileDelete_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_3";

	

 



/**
 * [tFileDelete_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_3";

	

 



/**
 * [tFileDelete_3 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_3 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_3";

	

 

ok_Hash.put("tFileDelete_3", true);
end_Hash.put("tFileDelete_3", System.currentTimeMillis());




/**
 * [tFileDelete_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileDelete_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tFileDelete_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_3 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_3";

	

 



/**
 * [tFileDelete_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_3_SUBPROCESS_STATE", 1);
	}
	

public void tFileDelete_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tFileDelete_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_4", false);
		start_Hash.put("tFileDelete_4", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_4";

	
		int tos_count_tFileDelete_4 = 0;
		

 



/**
 * [tFileDelete_4 begin ] stop
 */
	
	/**
	 * [tFileDelete_4 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_4";

	

 

class DeleteFoldertFileDelete_4{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
	java.io.File path_tFileDelete_4=new java.io.File(context.LocalPath+context.sampleTrain);
	if(path_tFileDelete_4.exists()){
		if(path_tFileDelete_4.isFile()){
	    	if(path_tFileDelete_4.delete()){
	    		globalMap.put("tFileDelete_4_CURRENT_STATUS", "File deleted.");
	    	}else{
	    		globalMap.put("tFileDelete_4_CURRENT_STATUS", "No file deleted.");
	    	}
		}else if(path_tFileDelete_4.isDirectory()){ 
	    	DeleteFoldertFileDelete_4 dftFileDelete_4 = new DeleteFoldertFileDelete_4();
	    	if(dftFileDelete_4.delete(path_tFileDelete_4)){
	    		globalMap.put("tFileDelete_4_CURRENT_STATUS", "Path deleted.");
	    	}else{
	    		globalMap.put("tFileDelete_4_CURRENT_STATUS", "No path deleted.");
	    	}
		}
	}else{
		globalMap.put("tFileDelete_4_CURRENT_STATUS", "File or path does not exist or is invalid.");
    }
    globalMap.put("tFileDelete_4_DELETE_PATH",context.LocalPath+context.sampleTrain);
    
     
 

 


	tos_count_tFileDelete_4++;

/**
 * [tFileDelete_4 main ] stop
 */
	
	/**
	 * [tFileDelete_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_4";

	

 



/**
 * [tFileDelete_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_4";

	

 



/**
 * [tFileDelete_4 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_4 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_4";

	

 

ok_Hash.put("tFileDelete_4", true);
end_Hash.put("tFileDelete_4", System.currentTimeMillis());




/**
 * [tFileDelete_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_4 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_4";

	

 



/**
 * [tFileDelete_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_4_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileDelete_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_TRAB_FINAL_Curated_DS_Data = new byte[0];
    static byte[] commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[0];

	
			    public String SalesOrderNumber;

				public String getSalesOrderNumber () {
					return this.SalesOrderNumber;
				}
				
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public java.util.Date DueDate;

				public java.util.Date getDueDate () {
					return this.DueDate;
				}
				
			    public java.util.Date ShipDate;

				public java.util.Date getShipDate () {
					return this.ShipDate;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public String ShipMethod;

				public String getShipMethod () {
					return this.ShipMethod;
				}
				
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String StateProvince;

				public String getStateProvince () {
					return this.StateProvince;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Color;

				public String getColor () {
					return this.Color;
				}
				
			    public String Size;

				public String getSize () {
					return this.Size;
				}
				
			    public BigDecimal Weight;

				public BigDecimal getWeight () {
					return this.Weight;
				}
				
			    public short OrderQty;

				public short getOrderQty () {
					return this.OrderQty;
				}
				
			    public double UnitPrice;

				public double getUnitPrice () {
					return this.UnitPrice;
				}
				
			    public double UnitPriceDiscount;

				public double getUnitPriceDiscount () {
					return this.UnitPriceDiscount;
				}
				
			    public double SubTotal;

				public double getSubTotal () {
					return this.SubTotal;
				}
				
			    public double TaxAmt;

				public double getTaxAmt () {
					return this.TaxAmt;
				}
				
			    public double Freight;

				public double getFreight () {
					return this.Freight;
				}
				
			    public double TotalDue;

				public double getTotalDue () {
					return this.TotalDue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TRAB_FINAL_Curated_DS_Data.length) {
				if(length < 1024 && commonByteArray_TRAB_FINAL_Curated_DS_Data.length == 0) {
   					commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[1024];
				} else {
   					commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TRAB_FINAL_Curated_DS_Data, 0, length);
			strReturn = new String(commonByteArray_TRAB_FINAL_Curated_DS_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TRAB_FINAL_Curated_DS_Data) {

        	try {

        		int length = 0;
		
					this.SalesOrderNumber = readString(dis);
					
					this.OrderDate = readDate(dis);
					
					this.DueDate = readDate(dis);
					
					this.ShipDate = readDate(dis);
					
					this.Status = readString(dis);
					
					this.ShipMethod = readString(dis);
					
					this.CompanyName = readString(dis);
					
					this.City = readString(dis);
					
					this.StateProvince = readString(dis);
					
					this.CountryRegion = readString(dis);
					
					this.Name = readString(dis);
					
					this.Color = readString(dis);
					
					this.Size = readString(dis);
					
						this.Weight = (BigDecimal) dis.readObject();
					
			        this.OrderQty = dis.readShort();
					
			        this.UnitPrice = dis.readDouble();
					
			        this.UnitPriceDiscount = dis.readDouble();
					
			        this.SubTotal = dis.readDouble();
					
			        this.TaxAmt = dis.readDouble();
					
			        this.Freight = dis.readDouble();
					
			        this.TotalDue = dis.readDouble();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SalesOrderNumber,dos);
					
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// java.util.Date
				
						writeDate(this.DueDate,dos);
					
					// java.util.Date
				
						writeDate(this.ShipDate,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// String
				
						writeString(this.ShipMethod,dos);
					
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.StateProvince,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Color,dos);
					
					// String
				
						writeString(this.Size,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Weight);
					
					// short
				
		            	dos.writeShort(this.OrderQty);
					
					// double
				
		            	dos.writeDouble(this.UnitPrice);
					
					// double
				
		            	dos.writeDouble(this.UnitPriceDiscount);
					
					// double
				
		            	dos.writeDouble(this.SubTotal);
					
					// double
				
		            	dos.writeDouble(this.TaxAmt);
					
					// double
				
		            	dos.writeDouble(this.Freight);
					
					// double
				
		            	dos.writeDouble(this.TotalDue);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderNumber="+SalesOrderNumber);
		sb.append(",OrderDate="+String.valueOf(OrderDate));
		sb.append(",DueDate="+String.valueOf(DueDate));
		sb.append(",ShipDate="+String.valueOf(ShipDate));
		sb.append(",Status="+Status);
		sb.append(",ShipMethod="+ShipMethod);
		sb.append(",CompanyName="+CompanyName);
		sb.append(",City="+City);
		sb.append(",StateProvince="+StateProvince);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",Name="+Name);
		sb.append(",Color="+Color);
		sb.append(",Size="+Size);
		sb.append(",Weight="+String.valueOf(Weight));
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",UnitPrice="+String.valueOf(UnitPrice));
		sb.append(",UnitPriceDiscount="+String.valueOf(UnitPriceDiscount));
		sb.append(",SubTotal="+String.valueOf(SubTotal));
		sb.append(",TaxAmt="+String.valueOf(TaxAmt));
		sb.append(",Freight="+String.valueOf(Freight));
		sb.append(",TotalDue="+String.valueOf(TotalDue));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_TRAB_FINAL_Curated_DS_Data = new byte[0];
    static byte[] commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[0];

	
			    public String SalesOrderNumber;

				public String getSalesOrderNumber () {
					return this.SalesOrderNumber;
				}
				
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public java.util.Date DueDate;

				public java.util.Date getDueDate () {
					return this.DueDate;
				}
				
			    public java.util.Date ShipDate;

				public java.util.Date getShipDate () {
					return this.ShipDate;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public String ShipMethod;

				public String getShipMethod () {
					return this.ShipMethod;
				}
				
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String StateProvince;

				public String getStateProvince () {
					return this.StateProvince;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Color;

				public String getColor () {
					return this.Color;
				}
				
			    public String Size;

				public String getSize () {
					return this.Size;
				}
				
			    public BigDecimal Weight;

				public BigDecimal getWeight () {
					return this.Weight;
				}
				
			    public short OrderQty;

				public short getOrderQty () {
					return this.OrderQty;
				}
				
			    public double UnitPrice;

				public double getUnitPrice () {
					return this.UnitPrice;
				}
				
			    public double UnitPriceDiscount;

				public double getUnitPriceDiscount () {
					return this.UnitPriceDiscount;
				}
				
			    public double SubTotal;

				public double getSubTotal () {
					return this.SubTotal;
				}
				
			    public double TaxAmt;

				public double getTaxAmt () {
					return this.TaxAmt;
				}
				
			    public double Freight;

				public double getFreight () {
					return this.Freight;
				}
				
			    public double TotalDue;

				public double getTotalDue () {
					return this.TotalDue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TRAB_FINAL_Curated_DS_Data.length) {
				if(length < 1024 && commonByteArray_TRAB_FINAL_Curated_DS_Data.length == 0) {
   					commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[1024];
				} else {
   					commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TRAB_FINAL_Curated_DS_Data, 0, length);
			strReturn = new String(commonByteArray_TRAB_FINAL_Curated_DS_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TRAB_FINAL_Curated_DS_Data) {

        	try {

        		int length = 0;
		
					this.SalesOrderNumber = readString(dis);
					
					this.OrderDate = readDate(dis);
					
					this.DueDate = readDate(dis);
					
					this.ShipDate = readDate(dis);
					
					this.Status = readString(dis);
					
					this.ShipMethod = readString(dis);
					
					this.CompanyName = readString(dis);
					
					this.City = readString(dis);
					
					this.StateProvince = readString(dis);
					
					this.CountryRegion = readString(dis);
					
					this.Name = readString(dis);
					
					this.Color = readString(dis);
					
					this.Size = readString(dis);
					
						this.Weight = (BigDecimal) dis.readObject();
					
			        this.OrderQty = dis.readShort();
					
			        this.UnitPrice = dis.readDouble();
					
			        this.UnitPriceDiscount = dis.readDouble();
					
			        this.SubTotal = dis.readDouble();
					
			        this.TaxAmt = dis.readDouble();
					
			        this.Freight = dis.readDouble();
					
			        this.TotalDue = dis.readDouble();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SalesOrderNumber,dos);
					
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// java.util.Date
				
						writeDate(this.DueDate,dos);
					
					// java.util.Date
				
						writeDate(this.ShipDate,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// String
				
						writeString(this.ShipMethod,dos);
					
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.StateProvince,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Color,dos);
					
					// String
				
						writeString(this.Size,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Weight);
					
					// short
				
		            	dos.writeShort(this.OrderQty);
					
					// double
				
		            	dos.writeDouble(this.UnitPrice);
					
					// double
				
		            	dos.writeDouble(this.UnitPriceDiscount);
					
					// double
				
		            	dos.writeDouble(this.SubTotal);
					
					// double
				
		            	dos.writeDouble(this.TaxAmt);
					
					// double
				
		            	dos.writeDouble(this.Freight);
					
					// double
				
		            	dos.writeDouble(this.TotalDue);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderNumber="+SalesOrderNumber);
		sb.append(",OrderDate="+String.valueOf(OrderDate));
		sb.append(",DueDate="+String.valueOf(DueDate));
		sb.append(",ShipDate="+String.valueOf(ShipDate));
		sb.append(",Status="+Status);
		sb.append(",ShipMethod="+ShipMethod);
		sb.append(",CompanyName="+CompanyName);
		sb.append(",City="+City);
		sb.append(",StateProvince="+StateProvince);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",Name="+Name);
		sb.append(",Color="+Color);
		sb.append(",Size="+Size);
		sb.append(",Weight="+String.valueOf(Weight));
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",UnitPrice="+String.valueOf(UnitPrice));
		sb.append(",UnitPriceDiscount="+String.valueOf(UnitPriceDiscount));
		sb.append(",SubTotal="+String.valueOf(SubTotal));
		sb.append(",TaxAmt="+String.valueOf(TaxAmt));
		sb.append(",Freight="+String.valueOf(Freight));
		sb.append(",TotalDue="+String.valueOf(TotalDue));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_TRAB_FINAL_Curated_DS_Data = new byte[0];
    static byte[] commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[0];

	
			    public String SalesOrderNumber;

				public String getSalesOrderNumber () {
					return this.SalesOrderNumber;
				}
				
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public java.util.Date DueDate;

				public java.util.Date getDueDate () {
					return this.DueDate;
				}
				
			    public java.util.Date ShipDate;

				public java.util.Date getShipDate () {
					return this.ShipDate;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public String SalesType;

				public String getSalesType () {
					return this.SalesType;
				}
				
			    public String ShipMethod;

				public String getShipMethod () {
					return this.ShipMethod;
				}
				
			    public String SalesPerson;

				public String getSalesPerson () {
					return this.SalesPerson;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String StateProvince;

				public String getStateProvince () {
					return this.StateProvince;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public String ProductName;

				public String getProductName () {
					return this.ProductName;
				}
				
			    public String ProductColor;

				public String getProductColor () {
					return this.ProductColor;
				}
				
			    public String ProductSize;

				public String getProductSize () {
					return this.ProductSize;
				}
				
			    public BigDecimal ProductWeight;

				public BigDecimal getProductWeight () {
					return this.ProductWeight;
				}
				
			    public String ProductModelName;

				public String getProductModelName () {
					return this.ProductModelName;
				}
				
			    public short OrderQty;

				public short getOrderQty () {
					return this.OrderQty;
				}
				
			    public double UnitPrice;

				public double getUnitPrice () {
					return this.UnitPrice;
				}
				
			    public double UnitPriceDiscount;

				public double getUnitPriceDiscount () {
					return this.UnitPriceDiscount;
				}
				
			    public double SubTotal;

				public double getSubTotal () {
					return this.SubTotal;
				}
				
			    public double TaxAmt;

				public double getTaxAmt () {
					return this.TaxAmt;
				}
				
			    public double Freight;

				public double getFreight () {
					return this.Freight;
				}
				
			    public double TotalDue;

				public double getTotalDue () {
					return this.TotalDue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TRAB_FINAL_Curated_DS_Data.length) {
				if(length < 1024 && commonByteArray_TRAB_FINAL_Curated_DS_Data.length == 0) {
   					commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[1024];
				} else {
   					commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TRAB_FINAL_Curated_DS_Data, 0, length);
			strReturn = new String(commonByteArray_TRAB_FINAL_Curated_DS_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TRAB_FINAL_Curated_DS_Data) {

        	try {

        		int length = 0;
		
					this.SalesOrderNumber = readString(dis);
					
					this.OrderDate = readDate(dis);
					
					this.DueDate = readDate(dis);
					
					this.ShipDate = readDate(dis);
					
					this.Status = readString(dis);
					
					this.SalesType = readString(dis);
					
					this.ShipMethod = readString(dis);
					
					this.SalesPerson = readString(dis);
					
					this.City = readString(dis);
					
					this.StateProvince = readString(dis);
					
					this.CountryRegion = readString(dis);
					
					this.ProductName = readString(dis);
					
					this.ProductColor = readString(dis);
					
					this.ProductSize = readString(dis);
					
						this.ProductWeight = (BigDecimal) dis.readObject();
					
					this.ProductModelName = readString(dis);
					
			        this.OrderQty = dis.readShort();
					
			        this.UnitPrice = dis.readDouble();
					
			        this.UnitPriceDiscount = dis.readDouble();
					
			        this.SubTotal = dis.readDouble();
					
			        this.TaxAmt = dis.readDouble();
					
			        this.Freight = dis.readDouble();
					
			        this.TotalDue = dis.readDouble();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SalesOrderNumber,dos);
					
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// java.util.Date
				
						writeDate(this.DueDate,dos);
					
					// java.util.Date
				
						writeDate(this.ShipDate,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// String
				
						writeString(this.SalesType,dos);
					
					// String
				
						writeString(this.ShipMethod,dos);
					
					// String
				
						writeString(this.SalesPerson,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.StateProvince,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
					// String
				
						writeString(this.ProductName,dos);
					
					// String
				
						writeString(this.ProductColor,dos);
					
					// String
				
						writeString(this.ProductSize,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ProductWeight);
					
					// String
				
						writeString(this.ProductModelName,dos);
					
					// short
				
		            	dos.writeShort(this.OrderQty);
					
					// double
				
		            	dos.writeDouble(this.UnitPrice);
					
					// double
				
		            	dos.writeDouble(this.UnitPriceDiscount);
					
					// double
				
		            	dos.writeDouble(this.SubTotal);
					
					// double
				
		            	dos.writeDouble(this.TaxAmt);
					
					// double
				
		            	dos.writeDouble(this.Freight);
					
					// double
				
		            	dos.writeDouble(this.TotalDue);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderNumber="+SalesOrderNumber);
		sb.append(",OrderDate="+String.valueOf(OrderDate));
		sb.append(",DueDate="+String.valueOf(DueDate));
		sb.append(",ShipDate="+String.valueOf(ShipDate));
		sb.append(",Status="+Status);
		sb.append(",SalesType="+SalesType);
		sb.append(",ShipMethod="+ShipMethod);
		sb.append(",SalesPerson="+SalesPerson);
		sb.append(",City="+City);
		sb.append(",StateProvince="+StateProvince);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",ProductName="+ProductName);
		sb.append(",ProductColor="+ProductColor);
		sb.append(",ProductSize="+ProductSize);
		sb.append(",ProductWeight="+String.valueOf(ProductWeight));
		sb.append(",ProductModelName="+ProductModelName);
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",UnitPrice="+String.valueOf(UnitPrice));
		sb.append(",UnitPriceDiscount="+String.valueOf(UnitPriceDiscount));
		sb.append(",SubTotal="+String.valueOf(SubTotal));
		sb.append(",TaxAmt="+String.valueOf(TaxAmt));
		sb.append(",Freight="+String.valueOf(Freight));
		sb.append(",TotalDue="+String.valueOf(TotalDue));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_TRAB_FINAL_Curated_DS_Data = new byte[0];
    static byte[] commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[0];

	
			    public String SalesOrderNumber;

				public String getSalesOrderNumber () {
					return this.SalesOrderNumber;
				}
				
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public java.util.Date DueDate;

				public java.util.Date getDueDate () {
					return this.DueDate;
				}
				
			    public java.util.Date ShipDate;

				public java.util.Date getShipDate () {
					return this.ShipDate;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public String SalesType;

				public String getSalesType () {
					return this.SalesType;
				}
				
			    public String ShipMethod;

				public String getShipMethod () {
					return this.ShipMethod;
				}
				
			    public String SalesPerson;

				public String getSalesPerson () {
					return this.SalesPerson;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String StateProvince;

				public String getStateProvince () {
					return this.StateProvince;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public String ProductName;

				public String getProductName () {
					return this.ProductName;
				}
				
			    public String ProductColor;

				public String getProductColor () {
					return this.ProductColor;
				}
				
			    public String ProductSize;

				public String getProductSize () {
					return this.ProductSize;
				}
				
			    public BigDecimal ProductWeight;

				public BigDecimal getProductWeight () {
					return this.ProductWeight;
				}
				
			    public String ProductModelName;

				public String getProductModelName () {
					return this.ProductModelName;
				}
				
			    public short OrderQty;

				public short getOrderQty () {
					return this.OrderQty;
				}
				
			    public double UnitPrice;

				public double getUnitPrice () {
					return this.UnitPrice;
				}
				
			    public double UnitPriceDiscount;

				public double getUnitPriceDiscount () {
					return this.UnitPriceDiscount;
				}
				
			    public double SubTotal;

				public double getSubTotal () {
					return this.SubTotal;
				}
				
			    public double TaxAmt;

				public double getTaxAmt () {
					return this.TaxAmt;
				}
				
			    public double Freight;

				public double getFreight () {
					return this.Freight;
				}
				
			    public double TotalDue;

				public double getTotalDue () {
					return this.TotalDue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TRAB_FINAL_Curated_DS_Data.length) {
				if(length < 1024 && commonByteArray_TRAB_FINAL_Curated_DS_Data.length == 0) {
   					commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[1024];
				} else {
   					commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TRAB_FINAL_Curated_DS_Data, 0, length);
			strReturn = new String(commonByteArray_TRAB_FINAL_Curated_DS_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TRAB_FINAL_Curated_DS_Data) {

        	try {

        		int length = 0;
		
					this.SalesOrderNumber = readString(dis);
					
					this.OrderDate = readDate(dis);
					
					this.DueDate = readDate(dis);
					
					this.ShipDate = readDate(dis);
					
					this.Status = readString(dis);
					
					this.SalesType = readString(dis);
					
					this.ShipMethod = readString(dis);
					
					this.SalesPerson = readString(dis);
					
					this.City = readString(dis);
					
					this.StateProvince = readString(dis);
					
					this.CountryRegion = readString(dis);
					
					this.ProductName = readString(dis);
					
					this.ProductColor = readString(dis);
					
					this.ProductSize = readString(dis);
					
						this.ProductWeight = (BigDecimal) dis.readObject();
					
					this.ProductModelName = readString(dis);
					
			        this.OrderQty = dis.readShort();
					
			        this.UnitPrice = dis.readDouble();
					
			        this.UnitPriceDiscount = dis.readDouble();
					
			        this.SubTotal = dis.readDouble();
					
			        this.TaxAmt = dis.readDouble();
					
			        this.Freight = dis.readDouble();
					
			        this.TotalDue = dis.readDouble();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SalesOrderNumber,dos);
					
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// java.util.Date
				
						writeDate(this.DueDate,dos);
					
					// java.util.Date
				
						writeDate(this.ShipDate,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// String
				
						writeString(this.SalesType,dos);
					
					// String
				
						writeString(this.ShipMethod,dos);
					
					// String
				
						writeString(this.SalesPerson,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.StateProvince,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
					// String
				
						writeString(this.ProductName,dos);
					
					// String
				
						writeString(this.ProductColor,dos);
					
					// String
				
						writeString(this.ProductSize,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ProductWeight);
					
					// String
				
						writeString(this.ProductModelName,dos);
					
					// short
				
		            	dos.writeShort(this.OrderQty);
					
					// double
				
		            	dos.writeDouble(this.UnitPrice);
					
					// double
				
		            	dos.writeDouble(this.UnitPriceDiscount);
					
					// double
				
		            	dos.writeDouble(this.SubTotal);
					
					// double
				
		            	dos.writeDouble(this.TaxAmt);
					
					// double
				
		            	dos.writeDouble(this.Freight);
					
					// double
				
		            	dos.writeDouble(this.TotalDue);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderNumber="+SalesOrderNumber);
		sb.append(",OrderDate="+String.valueOf(OrderDate));
		sb.append(",DueDate="+String.valueOf(DueDate));
		sb.append(",ShipDate="+String.valueOf(ShipDate));
		sb.append(",Status="+Status);
		sb.append(",SalesType="+SalesType);
		sb.append(",ShipMethod="+ShipMethod);
		sb.append(",SalesPerson="+SalesPerson);
		sb.append(",City="+City);
		sb.append(",StateProvince="+StateProvince);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",ProductName="+ProductName);
		sb.append(",ProductColor="+ProductColor);
		sb.append(",ProductSize="+ProductSize);
		sb.append(",ProductWeight="+String.valueOf(ProductWeight));
		sb.append(",ProductModelName="+ProductModelName);
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",UnitPrice="+String.valueOf(UnitPrice));
		sb.append(",UnitPriceDiscount="+String.valueOf(UnitPriceDiscount));
		sb.append(",SubTotal="+String.valueOf(SubTotal));
		sb.append(",TaxAmt="+String.valueOf(TaxAmt));
		sb.append(",Freight="+String.valueOf(Freight));
		sb.append(",TotalDue="+String.valueOf(TotalDue));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_TRAB_FINAL_Curated_DS_Data = new byte[0];
    static byte[] commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[0];

	
			    public String SalesOrderNumber;

				public String getSalesOrderNumber () {
					return this.SalesOrderNumber;
				}
				
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public java.util.Date DueDate;

				public java.util.Date getDueDate () {
					return this.DueDate;
				}
				
			    public java.util.Date ShipDate;

				public java.util.Date getShipDate () {
					return this.ShipDate;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public String ShipMethod;

				public String getShipMethod () {
					return this.ShipMethod;
				}
				
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String StateProvince;

				public String getStateProvince () {
					return this.StateProvince;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Color;

				public String getColor () {
					return this.Color;
				}
				
			    public String Size;

				public String getSize () {
					return this.Size;
				}
				
			    public BigDecimal Weight;

				public BigDecimal getWeight () {
					return this.Weight;
				}
				
			    public short OrderQty;

				public short getOrderQty () {
					return this.OrderQty;
				}
				
			    public double UnitPrice;

				public double getUnitPrice () {
					return this.UnitPrice;
				}
				
			    public double UnitPriceDiscount;

				public double getUnitPriceDiscount () {
					return this.UnitPriceDiscount;
				}
				
			    public double SubTotal;

				public double getSubTotal () {
					return this.SubTotal;
				}
				
			    public double TaxAmt;

				public double getTaxAmt () {
					return this.TaxAmt;
				}
				
			    public double Freight;

				public double getFreight () {
					return this.Freight;
				}
				
			    public double TotalDue;

				public double getTotalDue () {
					return this.TotalDue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TRAB_FINAL_Curated_DS_Data.length) {
				if(length < 1024 && commonByteArray_TRAB_FINAL_Curated_DS_Data.length == 0) {
   					commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[1024];
				} else {
   					commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TRAB_FINAL_Curated_DS_Data, 0, length);
			strReturn = new String(commonByteArray_TRAB_FINAL_Curated_DS_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TRAB_FINAL_Curated_DS_Data) {

        	try {

        		int length = 0;
		
					this.SalesOrderNumber = readString(dis);
					
					this.OrderDate = readDate(dis);
					
					this.DueDate = readDate(dis);
					
					this.ShipDate = readDate(dis);
					
					this.Status = readString(dis);
					
					this.ShipMethod = readString(dis);
					
					this.CompanyName = readString(dis);
					
					this.City = readString(dis);
					
					this.StateProvince = readString(dis);
					
					this.CountryRegion = readString(dis);
					
					this.Name = readString(dis);
					
					this.Color = readString(dis);
					
					this.Size = readString(dis);
					
						this.Weight = (BigDecimal) dis.readObject();
					
			        this.OrderQty = dis.readShort();
					
			        this.UnitPrice = dis.readDouble();
					
			        this.UnitPriceDiscount = dis.readDouble();
					
			        this.SubTotal = dis.readDouble();
					
			        this.TaxAmt = dis.readDouble();
					
			        this.Freight = dis.readDouble();
					
			        this.TotalDue = dis.readDouble();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SalesOrderNumber,dos);
					
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// java.util.Date
				
						writeDate(this.DueDate,dos);
					
					// java.util.Date
				
						writeDate(this.ShipDate,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// String
				
						writeString(this.ShipMethod,dos);
					
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.StateProvince,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Color,dos);
					
					// String
				
						writeString(this.Size,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Weight);
					
					// short
				
		            	dos.writeShort(this.OrderQty);
					
					// double
				
		            	dos.writeDouble(this.UnitPrice);
					
					// double
				
		            	dos.writeDouble(this.UnitPriceDiscount);
					
					// double
				
		            	dos.writeDouble(this.SubTotal);
					
					// double
				
		            	dos.writeDouble(this.TaxAmt);
					
					// double
				
		            	dos.writeDouble(this.Freight);
					
					// double
				
		            	dos.writeDouble(this.TotalDue);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderNumber="+SalesOrderNumber);
		sb.append(",OrderDate="+String.valueOf(OrderDate));
		sb.append(",DueDate="+String.valueOf(DueDate));
		sb.append(",ShipDate="+String.valueOf(ShipDate));
		sb.append(",Status="+Status);
		sb.append(",ShipMethod="+ShipMethod);
		sb.append(",CompanyName="+CompanyName);
		sb.append(",City="+City);
		sb.append(",StateProvince="+StateProvince);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",Name="+Name);
		sb.append(",Color="+Color);
		sb.append(",Size="+Size);
		sb.append(",Weight="+String.valueOf(Weight));
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",UnitPrice="+String.valueOf(UnitPrice));
		sb.append(",UnitPriceDiscount="+String.valueOf(UnitPriceDiscount));
		sb.append(",SubTotal="+String.valueOf(SubTotal));
		sb.append(",TaxAmt="+String.valueOf(TaxAmt));
		sb.append(",Freight="+String.valueOf(Freight));
		sb.append(",TotalDue="+String.valueOf(TotalDue));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_TRAB_FINAL_Curated_DS_Data = new byte[0];
    static byte[] commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[0];

	
			    public String SalesOrderNumber;

				public String getSalesOrderNumber () {
					return this.SalesOrderNumber;
				}
				
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public java.util.Date DueDate;

				public java.util.Date getDueDate () {
					return this.DueDate;
				}
				
			    public java.util.Date ShipDate;

				public java.util.Date getShipDate () {
					return this.ShipDate;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public String ShipMethod;

				public String getShipMethod () {
					return this.ShipMethod;
				}
				
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String StateProvince;

				public String getStateProvince () {
					return this.StateProvince;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Color;

				public String getColor () {
					return this.Color;
				}
				
			    public String Size;

				public String getSize () {
					return this.Size;
				}
				
			    public BigDecimal Weight;

				public BigDecimal getWeight () {
					return this.Weight;
				}
				
			    public short OrderQty;

				public short getOrderQty () {
					return this.OrderQty;
				}
				
			    public double UnitPrice;

				public double getUnitPrice () {
					return this.UnitPrice;
				}
				
			    public double UnitPriceDiscount;

				public double getUnitPriceDiscount () {
					return this.UnitPriceDiscount;
				}
				
			    public double SubTotal;

				public double getSubTotal () {
					return this.SubTotal;
				}
				
			    public double TaxAmt;

				public double getTaxAmt () {
					return this.TaxAmt;
				}
				
			    public double Freight;

				public double getFreight () {
					return this.Freight;
				}
				
			    public double TotalDue;

				public double getTotalDue () {
					return this.TotalDue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TRAB_FINAL_Curated_DS_Data.length) {
				if(length < 1024 && commonByteArray_TRAB_FINAL_Curated_DS_Data.length == 0) {
   					commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[1024];
				} else {
   					commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TRAB_FINAL_Curated_DS_Data, 0, length);
			strReturn = new String(commonByteArray_TRAB_FINAL_Curated_DS_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TRAB_FINAL_Curated_DS_Data) {

        	try {

        		int length = 0;
		
					this.SalesOrderNumber = readString(dis);
					
					this.OrderDate = readDate(dis);
					
					this.DueDate = readDate(dis);
					
					this.ShipDate = readDate(dis);
					
					this.Status = readString(dis);
					
					this.ShipMethod = readString(dis);
					
					this.CompanyName = readString(dis);
					
					this.City = readString(dis);
					
					this.StateProvince = readString(dis);
					
					this.CountryRegion = readString(dis);
					
					this.Name = readString(dis);
					
					this.Color = readString(dis);
					
					this.Size = readString(dis);
					
						this.Weight = (BigDecimal) dis.readObject();
					
			        this.OrderQty = dis.readShort();
					
			        this.UnitPrice = dis.readDouble();
					
			        this.UnitPriceDiscount = dis.readDouble();
					
			        this.SubTotal = dis.readDouble();
					
			        this.TaxAmt = dis.readDouble();
					
			        this.Freight = dis.readDouble();
					
			        this.TotalDue = dis.readDouble();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SalesOrderNumber,dos);
					
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// java.util.Date
				
						writeDate(this.DueDate,dos);
					
					// java.util.Date
				
						writeDate(this.ShipDate,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// String
				
						writeString(this.ShipMethod,dos);
					
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.StateProvince,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Color,dos);
					
					// String
				
						writeString(this.Size,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Weight);
					
					// short
				
		            	dos.writeShort(this.OrderQty);
					
					// double
				
		            	dos.writeDouble(this.UnitPrice);
					
					// double
				
		            	dos.writeDouble(this.UnitPriceDiscount);
					
					// double
				
		            	dos.writeDouble(this.SubTotal);
					
					// double
				
		            	dos.writeDouble(this.TaxAmt);
					
					// double
				
		            	dos.writeDouble(this.Freight);
					
					// double
				
		            	dos.writeDouble(this.TotalDue);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderNumber="+SalesOrderNumber);
		sb.append(",OrderDate="+String.valueOf(OrderDate));
		sb.append(",DueDate="+String.valueOf(DueDate));
		sb.append(",ShipDate="+String.valueOf(ShipDate));
		sb.append(",Status="+Status);
		sb.append(",ShipMethod="+ShipMethod);
		sb.append(",CompanyName="+CompanyName);
		sb.append(",City="+City);
		sb.append(",StateProvince="+StateProvince);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",Name="+Name);
		sb.append(",Color="+Color);
		sb.append(",Size="+Size);
		sb.append(",Weight="+String.valueOf(Weight));
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",UnitPrice="+String.valueOf(UnitPrice));
		sb.append(",UnitPriceDiscount="+String.valueOf(UnitPriceDiscount));
		sb.append(",SubTotal="+String.valueOf(SubTotal));
		sb.append(",TaxAmt="+String.valueOf(TaxAmt));
		sb.append(",Freight="+String.valueOf(Freight));
		sb.append(",TotalDue="+String.valueOf(TotalDue));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_TRAB_FINAL_Curated_DS_Data = new byte[0];
    static byte[] commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[0];

	
			    public int SalesOrderID;

				public int getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public int SalesOrderDetailID;

				public int getSalesOrderDetailID () {
					return this.SalesOrderDetailID;
				}
				
			    public short OrderQty;

				public short getOrderQty () {
					return this.OrderQty;
				}
				
			    public int ProductID;

				public int getProductID () {
					return this.ProductID;
				}
				
			    public double UnitPrice;

				public double getUnitPrice () {
					return this.UnitPrice;
				}
				
			    public double UnitPriceDiscount;

				public double getUnitPriceDiscount () {
					return this.UnitPriceDiscount;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TRAB_FINAL_Curated_DS_Data) {

        	try {

        		int length = 0;
		
			        this.SalesOrderID = dis.readInt();
					
			        this.SalesOrderDetailID = dis.readInt();
					
			        this.OrderQty = dis.readShort();
					
			        this.ProductID = dis.readInt();
					
			        this.UnitPrice = dis.readDouble();
					
			        this.UnitPriceDiscount = dis.readDouble();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SalesOrderID);
					
					// int
				
		            	dos.writeInt(this.SalesOrderDetailID);
					
					// short
				
		            	dos.writeShort(this.OrderQty);
					
					// int
				
		            	dos.writeInt(this.ProductID);
					
					// double
				
		            	dos.writeDouble(this.UnitPrice);
					
					// double
				
		            	dos.writeDouble(this.UnitPriceDiscount);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",SalesOrderDetailID="+String.valueOf(SalesOrderDetailID));
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",UnitPrice="+String.valueOf(UnitPrice));
		sb.append(",UnitPriceDiscount="+String.valueOf(UnitPriceDiscount));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_TRAB_FINAL_Curated_DS_Data = new byte[0];
    static byte[] commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SalesOrderID;

				public int getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public int SalesOrderDetailID;

				public int getSalesOrderDetailID () {
					return this.SalesOrderDetailID;
				}
				
			    public short OrderQty;

				public short getOrderQty () {
					return this.OrderQty;
				}
				
			    public int ProductID;

				public int getProductID () {
					return this.ProductID;
				}
				
			    public double UnitPrice;

				public double getUnitPrice () {
					return this.UnitPrice;
				}
				
			    public double UnitPriceDiscount;

				public double getUnitPriceDiscount () {
					return this.UnitPriceDiscount;
				}
				
			    public BigDecimal LineTotal;

				public BigDecimal getLineTotal () {
					return this.LineTotal;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SalesOrderID;
						
							result = prime * result + (int) this.SalesOrderDetailID;
						
							result = prime * result + (int) this.ProductID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.SalesOrderID != other.SalesOrderID)
							return false;
					
						if (this.SalesOrderDetailID != other.SalesOrderDetailID)
							return false;
					
						if (this.ProductID != other.ProductID)
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.SalesOrderID = this.SalesOrderID;
	            other.SalesOrderDetailID = this.SalesOrderDetailID;
	            other.OrderQty = this.OrderQty;
	            other.ProductID = this.ProductID;
	            other.UnitPrice = this.UnitPrice;
	            other.UnitPriceDiscount = this.UnitPriceDiscount;
	            other.LineTotal = this.LineTotal;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.SalesOrderID = this.SalesOrderID;
	            	other.SalesOrderDetailID = this.SalesOrderDetailID;
	            	other.ProductID = this.ProductID;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TRAB_FINAL_Curated_DS_Data) {

        	try {

        		int length = 0;
		
			        this.SalesOrderID = dis.readInt();
					
			        this.SalesOrderDetailID = dis.readInt();
					
			        this.OrderQty = dis.readShort();
					
			        this.ProductID = dis.readInt();
					
			        this.UnitPrice = dis.readDouble();
					
			        this.UnitPriceDiscount = dis.readDouble();
					
						this.LineTotal = (BigDecimal) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SalesOrderID);
					
					// int
				
		            	dos.writeInt(this.SalesOrderDetailID);
					
					// short
				
		            	dos.writeShort(this.OrderQty);
					
					// int
				
		            	dos.writeInt(this.ProductID);
					
					// double
				
		            	dos.writeDouble(this.UnitPrice);
					
					// double
				
		            	dos.writeDouble(this.UnitPriceDiscount);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LineTotal);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",SalesOrderDetailID="+String.valueOf(SalesOrderDetailID));
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",UnitPrice="+String.valueOf(UnitPrice));
		sb.append(",UnitPriceDiscount="+String.valueOf(UnitPriceDiscount));
		sb.append(",LineTotal="+String.valueOf(LineTotal));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SalesOrderDetailID, other.SalesOrderDetailID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ProductID, other.ProductID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_2Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_2Struct> {
    final static byte[] commonByteArrayLock_TRAB_FINAL_Curated_DS_Data = new byte[0];
    static byte[] commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SalesOrderID;

				public int getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public int SalesOrderDetailID;

				public int getSalesOrderDetailID () {
					return this.SalesOrderDetailID;
				}
				
			    public short OrderQty;

				public short getOrderQty () {
					return this.OrderQty;
				}
				
			    public int ProductID;

				public int getProductID () {
					return this.ProductID;
				}
				
			    public double UnitPrice;

				public double getUnitPrice () {
					return this.UnitPrice;
				}
				
			    public double UnitPriceDiscount;

				public double getUnitPriceDiscount () {
					return this.UnitPriceDiscount;
				}
				
			    public BigDecimal LineTotal;

				public BigDecimal getLineTotal () {
					return this.LineTotal;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SalesOrderID;
						
							result = prime * result + (int) this.SalesOrderDetailID;
						
							result = prime * result + (int) this.ProductID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tFileInputDelimited_2Struct other = (after_tFileInputDelimited_2Struct) obj;
		
						if (this.SalesOrderID != other.SalesOrderID)
							return false;
					
						if (this.SalesOrderDetailID != other.SalesOrderDetailID)
							return false;
					
						if (this.ProductID != other.ProductID)
							return false;
					

		return true;
    }

	public void copyDataTo(after_tFileInputDelimited_2Struct other) {

		other.SalesOrderID = this.SalesOrderID;
	            other.SalesOrderDetailID = this.SalesOrderDetailID;
	            other.OrderQty = this.OrderQty;
	            other.ProductID = this.ProductID;
	            other.UnitPrice = this.UnitPrice;
	            other.UnitPriceDiscount = this.UnitPriceDiscount;
	            other.LineTotal = this.LineTotal;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(after_tFileInputDelimited_2Struct other) {

		other.SalesOrderID = this.SalesOrderID;
	            	other.SalesOrderDetailID = this.SalesOrderDetailID;
	            	other.ProductID = this.ProductID;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TRAB_FINAL_Curated_DS_Data) {

        	try {

        		int length = 0;
		
			        this.SalesOrderID = dis.readInt();
					
			        this.SalesOrderDetailID = dis.readInt();
					
			        this.OrderQty = dis.readShort();
					
			        this.ProductID = dis.readInt();
					
			        this.UnitPrice = dis.readDouble();
					
			        this.UnitPriceDiscount = dis.readDouble();
					
						this.LineTotal = (BigDecimal) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SalesOrderID);
					
					// int
				
		            	dos.writeInt(this.SalesOrderDetailID);
					
					// short
				
		            	dos.writeShort(this.OrderQty);
					
					// int
				
		            	dos.writeInt(this.ProductID);
					
					// double
				
		            	dos.writeDouble(this.UnitPrice);
					
					// double
				
		            	dos.writeDouble(this.UnitPriceDiscount);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LineTotal);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",SalesOrderDetailID="+String.valueOf(SalesOrderDetailID));
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",UnitPrice="+String.valueOf(UnitPrice));
		sb.append(",UnitPriceDiscount="+String.valueOf(UnitPriceDiscount));
		sb.append(",LineTotal="+String.valueOf(LineTotal));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SalesOrderDetailID, other.SalesOrderDetailID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ProductID, other.ProductID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputDelimited_1Process(globalMap);
		tFileInputDelimited_4Process(globalMap);
		tFileInputDelimited_5Process(globalMap);
		tFileInputDelimited_6Process(globalMap);
		tFileInputDelimited_7Process(globalMap);
		tFileInputDelimited_8Process(globalMap);

		row3Struct row3 = new row3Struct();
row2Struct row2 = new row2Struct();
out1Struct out1 = new out1Struct();
row17Struct row17 = new row17Struct();
out2Struct out2 = new out2Struct();
row15Struct row15 = new row15Struct();
out3Struct out3 = new out3Struct();
row18Struct row18 = new row18Struct();







	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.LocalPath+context.sampleDS)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
    if(filetFileOutputDelimited_2.exists()){
            throw new RuntimeException("The particular file \""+filetFileOutputDelimited_2.getAbsoluteFile() +
            "\" already exist. If you want to overwrite the file, please uncheck the" + 
            " \"Throw an error if the file already exist\" option in Advanced settings.");
        }
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                        if(fileToDelete_tFileOutputDelimited_2.exists()) {
                            fileToDelete_tFileOutputDelimited_2.delete();
                        }
                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false),"UTF-8"));
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("SalesOrderNumber");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("OrderDate");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("DueDate");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ShipDate");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Status");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("SalesType");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ShipMethod");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("SalesPerson");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("City");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("StateProvince");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("CountryRegion");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ProductName");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ProductColor");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ProductSize");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ProductWeight");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ProductModelName");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("OrderQty");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("UnitPrice");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("UnitPriceDiscount");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("SubTotal");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("TaxAmt");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Freight");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("TotalDue");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tSampleRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSampleRow_1", false);
		start_Hash.put("tSampleRow_1", System.currentTimeMillis());
		
	
	currentComponent="tSampleRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tSampleRow_1 = 0;
		

String[] rangetSampleRow_1 = "1..10".split(",");
java.util.Set rangeSettSampleRow_1 = new java.util.HashSet();

Integer nb_line_tSampleRow_1 = 0;

for(int i =0;i<rangetSampleRow_1.length;i++){

	if(rangetSampleRow_1[i].matches("\\d+")){
	
		rangeSettSampleRow_1 .add(Integer.valueOf(rangetSampleRow_1[i]));
		
	}else if(rangetSampleRow_1[i].matches("\\d+\\.\\.\\d+")){
		
		String[] edgetSampleRow_1= rangetSampleRow_1[i].split("\\.\\.");
		
		for(int j=Integer.valueOf(edgetSampleRow_1[0]).intValue();j<Integer.valueOf(edgetSampleRow_1[1]).intValue()+1;j++){			
			rangeSettSampleRow_1 .add(Integer.valueOf(j));			
		}		
	}else{
	
	}
	
}



 



/**
 * [tSampleRow_1 begin ] stop
 */





	
	/**
	 * [tFileOutputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_3", false);
		start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tFileOutputDelimited_3 = 0;
		

String fileName_tFileOutputDelimited_3 = "";
    fileName_tFileOutputDelimited_3 = (new java.io.File(context.LocalPath+context.sampleTrain)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_3 = null;
    String extension_tFileOutputDelimited_3 = null;
    String directory_tFileOutputDelimited_3 = null;
    if((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        }
        directory_tFileOutputDelimited_3 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_3 = true;
    java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
    globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
            int nb_line_tFileOutputDelimited_3 = 0;
            int splitedFileNo_tFileOutputDelimited_3 = 0;
            int currentRow_tFileOutputDelimited_3 = 0;

            final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
                        if(!dir_tFileOutputDelimited_3.exists()) {
                            dir_tFileOutputDelimited_3.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_3 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
                        if(fileToDelete_tFileOutputDelimited_3.exists()) {
                            fileToDelete_tFileOutputDelimited_3.delete();
                        }
                        outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, false),"UTF-8"));
                                    if(filetFileOutputDelimited_3.length()==0){
                                        outtFileOutputDelimited_3.write("SalesOrderNumber");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("OrderDate");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("DueDate");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("ShipDate");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("Status");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("ShipMethod");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("CompanyName");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("City");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("StateProvince");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("CountryRegion");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("Name");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("Color");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("Size");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("Weight");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("OrderQty");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("UnitPrice");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("UnitPriceDiscount");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("SubTotal");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("TaxAmt");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("Freight");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("TotalDue");
                                        outtFileOutputDelimited_3.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

 



/**
 * [tFileOutputDelimited_3 begin ] stop
 */



	
	/**
	 * [tSampleRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tSampleRow_2", false);
		start_Hash.put("tSampleRow_2", System.currentTimeMillis());
		
	
	currentComponent="tSampleRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tSampleRow_2 = 0;
		

String[] rangetSampleRow_2 = "1..30".split(",");
java.util.Set rangeSettSampleRow_2 = new java.util.HashSet();

Integer nb_line_tSampleRow_2 = 0;

for(int i =0;i<rangetSampleRow_2.length;i++){

	if(rangetSampleRow_2[i].matches("\\d+")){
	
		rangeSettSampleRow_2 .add(Integer.valueOf(rangetSampleRow_2[i]));
		
	}else if(rangetSampleRow_2[i].matches("\\d+\\.\\.\\d+")){
		
		String[] edgetSampleRow_2= rangetSampleRow_2[i].split("\\.\\.");
		
		for(int j=Integer.valueOf(edgetSampleRow_2[0]).intValue();j<Integer.valueOf(edgetSampleRow_2[1]).intValue()+1;j++){			
			rangeSettSampleRow_2 .add(Integer.valueOf(j));			
		}		
	}else{
	
	}
	
}



 



/**
 * [tSampleRow_2 begin ] stop
 */





	
	/**
	 * [tFileOutputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_4", false);
		start_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tFileOutputDelimited_4 = 0;
		

String fileName_tFileOutputDelimited_4 = "";
    fileName_tFileOutputDelimited_4 = (new java.io.File(context.LocalPath+context.sampleTest)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_4 = null;
    String extension_tFileOutputDelimited_4 = null;
    String directory_tFileOutputDelimited_4 = null;
    if((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        }
        directory_tFileOutputDelimited_4 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_4 = true;
    java.io.File filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
    globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
            int nb_line_tFileOutputDelimited_4 = 0;
            int splitedFileNo_tFileOutputDelimited_4 = 0;
            int currentRow_tFileOutputDelimited_4 = 0;

            final String OUT_DELIM_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_4 != null && directory_tFileOutputDelimited_4.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_4 = new java.io.File(directory_tFileOutputDelimited_4);
                        if(!dir_tFileOutputDelimited_4.exists()) {
                            dir_tFileOutputDelimited_4.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_4 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
                        if(fileToDelete_tFileOutputDelimited_4.exists()) {
                            fileToDelete_tFileOutputDelimited_4.delete();
                        }
                        outtFileOutputDelimited_4 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_4, false),"UTF-8"));
                                    if(filetFileOutputDelimited_4.length()==0){
                                        outtFileOutputDelimited_4.write("SalesOrderNumber");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("OrderDate");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("DueDate");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("ShipDate");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("Status");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("ShipMethod");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("CompanyName");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("City");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("StateProvince");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("CountryRegion");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("Name");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("Color");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("Size");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("Weight");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("OrderQty");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("UnitPrice");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("UnitPriceDiscount");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("SubTotal");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("TaxAmt");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("Freight");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("TotalDue");
                                        outtFileOutputDelimited_4.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_4", outtFileOutputDelimited_4);
resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

 



/**
 * [tFileOutputDelimited_4 begin ] stop
 */



	
	/**
	 * [tSampleRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tSampleRow_3", false);
		start_Hash.put("tSampleRow_3", System.currentTimeMillis());
		
	
	currentComponent="tSampleRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out3");
					}
				
		int tos_count_tSampleRow_3 = 0;
		

String[] rangetSampleRow_3 = "60..90".split(",");
java.util.Set rangeSettSampleRow_3 = new java.util.HashSet();

Integer nb_line_tSampleRow_3 = 0;

for(int i =0;i<rangetSampleRow_3.length;i++){

	if(rangetSampleRow_3[i].matches("\\d+")){
	
		rangeSettSampleRow_3 .add(Integer.valueOf(rangetSampleRow_3[i]));
		
	}else if(rangetSampleRow_3[i].matches("\\d+\\.\\.\\d+")){
		
		String[] edgetSampleRow_3= rangetSampleRow_3[i].split("\\.\\.");
		
		for(int j=Integer.valueOf(edgetSampleRow_3[0]).intValue();j<Integer.valueOf(edgetSampleRow_3[1]).intValue()+1;j++){			
			rangeSettSampleRow_3 .add(Integer.valueOf(j));			
		}		
	}else{
	
	}
	
}



 



/**
 * [tSampleRow_3 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
					globalMap.get( "tHash_Lookup_row4" ))
					;					
					
	

row4Struct row4HashKey = new row4Struct();
row4Struct row4Default = new row4Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
					globalMap.get( "tHash_Lookup_row8" ))
					;					
					
	

row8Struct row8HashKey = new row8Struct();
row8Struct row8Default = new row8Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
					globalMap.get( "tHash_Lookup_row9" ))
					;					
					
	

row9Struct row9HashKey = new row9Struct();
row9Struct row9Default = new row9Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
					globalMap.get( "tHash_Lookup_row10" ))
					;					
					
	

row10Struct row10HashKey = new row10Struct();
row10Struct row10Default = new row10Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) 
					globalMap.get( "tHash_Lookup_row11" ))
					;					
					
	

row11Struct row11HashKey = new row11Struct();
row11Struct row11Default = new row11Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
					globalMap.get( "tHash_Lookup_row13" ))
					;					
					
	

row13Struct row13HashKey = new row13Struct();
row13Struct row13Default = new row13Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
out2Struct out2_tmp = new out2Struct();
out3Struct out3_tmp = new out3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFilterColumns_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterColumns_2", false);
		start_Hash.put("tFilterColumns_2", System.currentTimeMillis());
		
	
	currentComponent="tFilterColumns_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tFilterColumns_2 = 0;
		


 int nb_line_tFilterColumns_2 = 0;
 



/**
 * [tFilterColumns_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try{
					
						Object filename_tFileInputDelimited_2 = context.LocalPath+context.SalesOrderDetail_Harmonized;
						if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
			if(footer_value_tFileInputDelimited_2 >0 || random_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(context.LocalPath+context.SalesOrderDetail_Harmonized, "UTF-8",";","\n",true,1,0,
									limit_tFileInputDelimited_2
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						row3 = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									row3 = new row3Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row3.SalesOrderID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"SalesOrderID", "row3", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
								try {
									row3.SalesOrderID = 0;
								} catch(java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't set default value for column '%s' in '%s'. Details: %s",
										"SalesOrderID", "row3", ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row3.SalesOrderDetailID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"SalesOrderDetailID", "row3", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
								try {
									row3.SalesOrderDetailID = 0;
								} catch(java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't set default value for column '%s' in '%s'. Details: %s",
										"SalesOrderDetailID", "row3", ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 2;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row3.OrderQty = ParserUtils.parseTo_short(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"OrderQty", "row3", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
								try {
									row3.OrderQty = 0;
								} catch(java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't set default value for column '%s' in '%s'. Details: %s",
										"OrderQty", "row3", ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 3;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row3.ProductID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductID", "row3", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
								try {
									row3.ProductID = 0;
								} catch(java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't set default value for column '%s' in '%s'. Details: %s",
										"ProductID", "row3", ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 4;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row3.UnitPrice = ParserUtils.parseTo_double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"UnitPrice", "row3", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
								try {
									row3.UnitPrice = 0;
								} catch(java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't set default value for column '%s' in '%s'. Details: %s",
										"UnitPrice", "row3", ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 5;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row3.UnitPriceDiscount = ParserUtils.parseTo_double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"UnitPriceDiscount", "row3", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
								try {
									row3.UnitPriceDiscount = 0;
								} catch(java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't set default value for column '%s' in '%s'. Details: %s",
										"UnitPriceDiscount", "row3", ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 6;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row3.LineTotal = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"LineTotal", "row3", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row3.LineTotal = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 7;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    									row3.ModifiedDate = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd'T'HH:mm:ss");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ModifiedDate", "row3", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row3.ModifiedDate = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row3 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tFilterColumns_2 main ] start
	 */

	

	
	
	currentComponent="tFilterColumns_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					
	

	row2.SalesOrderID = row3.SalesOrderID;

	
	row2.SalesOrderDetailID = row3.SalesOrderDetailID;

	
	row2.OrderQty = row3.OrderQty;

	
	row2.ProductID = row3.ProductID;

	
	row2.UnitPrice = row3.UnitPrice;

	
	row2.UnitPriceDiscount = row3.UnitPriceDiscount;

	
    nb_line_tFilterColumns_2++;

 


	tos_count_tFilterColumns_2++;

/**
 * [tFilterColumns_2 main ] stop
 */
	
	/**
	 * [tFilterColumns_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterColumns_2";

	

 



/**
 * [tFilterColumns_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_row4__SalesOrderID = row2.SalesOrderID ;
	                        		    	if(exprKeyValue_row4__SalesOrderID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			row4HashKey.SalesOrderID = (int)(Integer) exprKeyValue_row4__SalesOrderID;
                        		    		}
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.SalesOrderID = '" + row4HashKey.SalesOrderID + "'");
								} // G 071
							

							row4Struct row4 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row8" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow8 = false;
       		  	    	
       		  	    	
 							row8Struct row8ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_row8__CustomerID = row4.CustomerID ;
	                        		    	if(exprKeyValue_row8__CustomerID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			row8HashKey.CustomerID = (int)(Integer) exprKeyValue_row8__CustomerID;
                        		    		}
                        		    		

								
		                        	row8HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row8.lookup( row8HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row8 != null && tHash_Lookup_row8.getCount(row8HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row8' and it contains more one result from keys :  row8.CustomerID = '" + row8HashKey.CustomerID + "'");
								} // G 071
							

							row8Struct row8 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row8Struct fromLookup_row8 = null;
							row8 = row8Default;
										 
							
								 
							
							
								if (tHash_Lookup_row8 !=null && tHash_Lookup_row8.hasNext()) { // G 099
								
							
								
								fromLookup_row8 = tHash_Lookup_row8.next();

							
							
								} // G 099
							
							

							if(fromLookup_row8 != null) {
								row8 = fromLookup_row8;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_row9__CustomerID = row8.CustomerID ;
	                        		    	if(exprKeyValue_row9__CustomerID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			row9HashKey.CustomerID = (int)(Integer) exprKeyValue_row9__CustomerID;
                        		    		}
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row9 != null && tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.CustomerID = '" + row9HashKey.CustomerID + "'");
								} // G 071
							

							row9Struct row9 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								 
							
							
								if (tHash_Lookup_row9 !=null && tHash_Lookup_row9.hasNext()) { // G 099
								
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							
							
								} // G 099
							
							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row10" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow10 = false;
       		  	    	
       		  	    	
 							row10Struct row10ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_row10__AddressID = row9.AddressID ;
	                        		    	if(exprKeyValue_row10__AddressID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			row10HashKey.AddressID = (int)(Integer) exprKeyValue_row10__AddressID;
                        		    		}
                        		    		

								
		                        	row10HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row10.lookup( row10HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row10 != null && tHash_Lookup_row10.getCount(row10HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row10' and it contains more one result from keys :  row10.AddressID = '" + row10HashKey.AddressID + "'");
								} // G 071
							

							row10Struct row10 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row10Struct fromLookup_row10 = null;
							row10 = row10Default;
										 
							
								 
							
							
								if (tHash_Lookup_row10 !=null && tHash_Lookup_row10.hasNext()) { // G 099
								
							
								
								fromLookup_row10 = tHash_Lookup_row10.next();

							
							
								} // G 099
							
							

							if(fromLookup_row10 != null) {
								row10 = fromLookup_row10;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row11" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow11 = false;
       		  	    	
       		  	    	
 							row11Struct row11ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_row11__ProductID = row2.ProductID;
	                        		    	if(exprKeyValue_row11__ProductID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			row11HashKey.ProductID = (int)(Integer) exprKeyValue_row11__ProductID;
                        		    		}
                        		    		

								
		                        	row11HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row11.lookup( row11HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row11 != null && tHash_Lookup_row11.getCount(row11HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row11' and it contains more one result from keys :  row11.ProductID = '" + row11HashKey.ProductID + "'");
								} // G 071
							

							row11Struct row11 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row11Struct fromLookup_row11 = null;
							row11 = row11Default;
										 
							
								 
							
							
								if (tHash_Lookup_row11 !=null && tHash_Lookup_row11.hasNext()) { // G 099
								
							
								
								fromLookup_row11 = tHash_Lookup_row11.next();

							
							
								} // G 099
							
							

							if(fromLookup_row11 != null) {
								row11 = fromLookup_row11;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row13" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow13 = false;
       		  	    	
       		  	    	
 							row13Struct row13ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row13HashKey.ProductModelID = row11.ProductModelID ;
                        		    		

								
		                        	row13HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row13.lookup( row13HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row13 != null && tHash_Lookup_row13.getCount(row13HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row13' and it contains more one result from keys :  row13.ProductModelID = '" + row13HashKey.ProductModelID + "'");
								} // G 071
							

							row13Struct row13 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row13Struct fromLookup_row13 = null;
							row13 = row13Default;
										 
							
								 
							
							
								if (tHash_Lookup_row13 !=null && tHash_Lookup_row13.hasNext()) { // G 099
								
							
								
								fromLookup_row13 = tHash_Lookup_row13.next();

							
							
								} // G 099
							
							

							if(fromLookup_row13 != null) {
								row13 = fromLookup_row13;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;
out2 = null;
out3 = null;


// # Output table : 'out1'
out1_tmp.SalesOrderNumber = row4.SalesOrderNumber ;
out1_tmp.OrderDate = row4.OrderDate ;
out1_tmp.DueDate = row4.DueDate ;
out1_tmp.ShipDate = row4.ShipDate ;
out1_tmp.Status = row4.Status ;
out1_tmp.SalesType = row4.SalesType ;
out1_tmp.ShipMethod = row4.ShipMethod ;
out1_tmp.SalesPerson = row8.SalesPerson ;
out1_tmp.City = row10.City ;
out1_tmp.StateProvince = row10.StateProvince ;
out1_tmp.CountryRegion = row10.CountryRegion ;
out1_tmp.ProductName = row11.Name ;
out1_tmp.ProductColor = row11.Color ;
out1_tmp.ProductSize = row11.Size ;
out1_tmp.ProductWeight = row11.Weight ;
out1_tmp.ProductModelName = row13.Name ;
out1_tmp.OrderQty = row2.OrderQty ;
out1_tmp.UnitPrice = row2.UnitPrice ;
out1_tmp.UnitPriceDiscount = row2.UnitPriceDiscount ;
out1_tmp.SubTotal = row4.SubTotal ;
out1_tmp.TaxAmt = row4.TaxAmt ;
out1_tmp.Freight = row4.Freight ;
out1_tmp.TotalDue = row4.TotalDue ;
out1 = out1_tmp;

// # Output table : 'out2'
out2_tmp.SalesOrderNumber = row4.SalesOrderNumber ;
out2_tmp.OrderDate = row4.OrderDate ;
out2_tmp.DueDate = row4.DueDate ;
out2_tmp.ShipDate = row4.ShipDate ;
out2_tmp.Status = row4.Status ;
out2_tmp.ShipMethod = row4.ShipMethod ;
out2_tmp.CompanyName = row8.CompanyName ;
out2_tmp.City = row10.City ;
out2_tmp.StateProvince = row10.StateProvince ;
out2_tmp.CountryRegion = row10.CountryRegion ;
out2_tmp.Name = row11.Name ;
out2_tmp.Color = row11.Color ;
out2_tmp.Size = row11.Size ;
out2_tmp.Weight = row11.Weight ;
out2_tmp.OrderQty = row2.OrderQty ;
out2_tmp.UnitPrice = row2.UnitPrice ;
out2_tmp.UnitPriceDiscount = row2.UnitPriceDiscount ;
out2_tmp.SubTotal = row4.SubTotal ;
out2_tmp.TaxAmt = row4.TaxAmt ;
out2_tmp.Freight = row4.Freight ;
out2_tmp.TotalDue = row4.TotalDue ;
out2 = out2_tmp;

// # Output table : 'out3'
out3_tmp.SalesOrderNumber = row4.SalesOrderNumber  ;
out3_tmp.OrderDate = row4.OrderDate  ;
out3_tmp.DueDate = row4.DueDate  ;
out3_tmp.ShipDate = row4.ShipDate  ;
out3_tmp.Status = row4.Status  ;
out3_tmp.ShipMethod = row4.ShipMethod  ;
out3_tmp.CompanyName = row8.CompanyName  ;
out3_tmp.City = row10.City  ;
out3_tmp.StateProvince = row10.StateProvince  ;
out3_tmp.CountryRegion = row10.CountryRegion  ;
out3_tmp.Name = row11.Name  ;
out3_tmp.Color = row11.Color  ;
out3_tmp.Size = row11.Size  ;
out3_tmp.Weight = row11.Weight  ;
out3_tmp.OrderQty = row2.OrderQty  ;
out3_tmp.UnitPrice = row2.UnitPrice  ;
out3_tmp.UnitPriceDiscount = row2.UnitPriceDiscount  ;
out3_tmp.SubTotal = row4.SubTotal  ;
out3_tmp.TaxAmt = row4.TaxAmt  ;
out3_tmp.Freight = row4.Freight  ;
out3_tmp.TotalDue = row4.TotalDue  ;
out3 = out3_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tSampleRow_1 main ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out1");
					}
					

	
	nb_line_tSampleRow_1++;
	
 	if(!rangeSettSampleRow_1.contains(nb_line_tSampleRow_1)){        
            row17 = null;            	
 	}else{  	
 	   row17 = new row17Struct();
 	   

       row17.SalesOrderNumber = out1.SalesOrderNumber;
       

       row17.OrderDate = out1.OrderDate;
       

       row17.DueDate = out1.DueDate;
       

       row17.ShipDate = out1.ShipDate;
       

       row17.Status = out1.Status;
       

       row17.SalesType = out1.SalesType;
       

       row17.ShipMethod = out1.ShipMethod;
       

       row17.SalesPerson = out1.SalesPerson;
       

       row17.City = out1.City;
       

       row17.StateProvince = out1.StateProvince;
       

       row17.CountryRegion = out1.CountryRegion;
       

       row17.ProductName = out1.ProductName;
       

       row17.ProductColor = out1.ProductColor;
       

       row17.ProductSize = out1.ProductSize;
       

       row17.ProductWeight = out1.ProductWeight;
       

       row17.ProductModelName = out1.ProductModelName;
       

       row17.OrderQty = out1.OrderQty;
       

       row17.UnitPrice = out1.UnitPrice;
       

       row17.UnitPriceDiscount = out1.UnitPriceDiscount;
       

       row17.SubTotal = out1.SubTotal;
       

       row17.TaxAmt = out1.TaxAmt;
       

       row17.Freight = out1.Freight;
       

       row17.TotalDue = out1.TotalDue;
       
 	
 	}
 
 
 
 
 
 
 
 
 
 
 
 
 


	tos_count_tSampleRow_1++;

/**
 * [tSampleRow_1 main ] stop
 */
	
	/**
	 * [tSampleRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";

	

 



/**
 * [tSampleRow_1 process_data_begin ] stop
 */
// Start of branch "row17"
if(row17 != null) { 



	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row17");
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row17.SalesOrderNumber != null) {
                        sb_tFileOutputDelimited_2.append(
                            row17.SalesOrderNumber
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row17.OrderDate != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(row17.OrderDate, "yyyy-MM-dd'T'HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row17.DueDate != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(row17.DueDate, "yyyy-MM-dd'T'HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row17.ShipDate != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(row17.ShipDate, "yyyy-MM-dd'T'HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row17.Status != null) {
                        sb_tFileOutputDelimited_2.append(
                            row17.Status
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row17.SalesType != null) {
                        sb_tFileOutputDelimited_2.append(
                            row17.SalesType
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row17.ShipMethod != null) {
                        sb_tFileOutputDelimited_2.append(
                            row17.ShipMethod
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row17.SalesPerson != null) {
                        sb_tFileOutputDelimited_2.append(
                            row17.SalesPerson
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row17.City != null) {
                        sb_tFileOutputDelimited_2.append(
                            row17.City
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row17.StateProvince != null) {
                        sb_tFileOutputDelimited_2.append(
                            row17.StateProvince
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row17.CountryRegion != null) {
                        sb_tFileOutputDelimited_2.append(
                            row17.CountryRegion
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row17.ProductName != null) {
                        sb_tFileOutputDelimited_2.append(
                            row17.ProductName
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row17.ProductColor != null) {
                        sb_tFileOutputDelimited_2.append(
                            row17.ProductColor
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row17.ProductSize != null) {
                        sb_tFileOutputDelimited_2.append(
                            row17.ProductSize
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row17.ProductWeight != null) {
                        sb_tFileOutputDelimited_2.append(
                            row17.ProductWeight.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row17.ProductModelName != null) {
                        sb_tFileOutputDelimited_2.append(
                            row17.ProductModelName
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                        sb_tFileOutputDelimited_2.append(
                            row17.OrderQty
                        );
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                        sb_tFileOutputDelimited_2.append(
                            row17.UnitPrice
                        );
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                        sb_tFileOutputDelimited_2.append(
                            row17.UnitPriceDiscount
                        );
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                        sb_tFileOutputDelimited_2.append(
                            row17.SubTotal
                        );
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                        sb_tFileOutputDelimited_2.append(
                            row17.TaxAmt
                        );
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                        sb_tFileOutputDelimited_2.append(
                            row17.Freight
                        );
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                        sb_tFileOutputDelimited_2.append(
                            row17.TotalDue
                        );
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */

} // End of branch "row17"




	
	/**
	 * [tSampleRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";

	

 



/**
 * [tSampleRow_1 process_data_end ] stop
 */

} // End of branch "out1"




// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tSampleRow_2 main ] start
	 */

	

	
	
	currentComponent="tSampleRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out2");
					}
					

	
	nb_line_tSampleRow_2++;
	
 	if(!rangeSettSampleRow_2.contains(nb_line_tSampleRow_2)){        
            row15 = null;            	
 	}else{  	
 	   row15 = new row15Struct();
 	   

       row15.SalesOrderNumber = out2.SalesOrderNumber;
       

       row15.OrderDate = out2.OrderDate;
       

       row15.DueDate = out2.DueDate;
       

       row15.ShipDate = out2.ShipDate;
       

       row15.Status = out2.Status;
       

       row15.ShipMethod = out2.ShipMethod;
       

       row15.CompanyName = out2.CompanyName;
       

       row15.City = out2.City;
       

       row15.StateProvince = out2.StateProvince;
       

       row15.CountryRegion = out2.CountryRegion;
       

       row15.Name = out2.Name;
       

       row15.Color = out2.Color;
       

       row15.Size = out2.Size;
       

       row15.Weight = out2.Weight;
       

       row15.OrderQty = out2.OrderQty;
       

       row15.UnitPrice = out2.UnitPrice;
       

       row15.UnitPriceDiscount = out2.UnitPriceDiscount;
       

       row15.SubTotal = out2.SubTotal;
       

       row15.TaxAmt = out2.TaxAmt;
       

       row15.Freight = out2.Freight;
       

       row15.TotalDue = out2.TotalDue;
       
 	
 	}
 
 
 
 
 
 
 
 
 
 
 
 
 


	tos_count_tSampleRow_2++;

/**
 * [tSampleRow_2 main ] stop
 */
	
	/**
	 * [tSampleRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSampleRow_2";

	

 



/**
 * [tSampleRow_2 process_data_begin ] stop
 */
// Start of branch "row15"
if(row15 != null) { 



	
	/**
	 * [tFileOutputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row15");
					}
					


                    StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
                            if(row15.SalesOrderNumber != null) {
                        sb_tFileOutputDelimited_3.append(
                            row15.SalesOrderNumber
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row15.OrderDate != null) {
                        sb_tFileOutputDelimited_3.append(
                            FormatterUtils.format_Date(row15.OrderDate, "yyyy-MM-dd'T'HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row15.DueDate != null) {
                        sb_tFileOutputDelimited_3.append(
                            FormatterUtils.format_Date(row15.DueDate, "yyyy-MM-dd'T'HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row15.ShipDate != null) {
                        sb_tFileOutputDelimited_3.append(
                            FormatterUtils.format_Date(row15.ShipDate, "yyyy-MM-dd'T'HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row15.Status != null) {
                        sb_tFileOutputDelimited_3.append(
                            row15.Status
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row15.ShipMethod != null) {
                        sb_tFileOutputDelimited_3.append(
                            row15.ShipMethod
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row15.CompanyName != null) {
                        sb_tFileOutputDelimited_3.append(
                            row15.CompanyName
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row15.City != null) {
                        sb_tFileOutputDelimited_3.append(
                            row15.City
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row15.StateProvince != null) {
                        sb_tFileOutputDelimited_3.append(
                            row15.StateProvince
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row15.CountryRegion != null) {
                        sb_tFileOutputDelimited_3.append(
                            row15.CountryRegion
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row15.Name != null) {
                        sb_tFileOutputDelimited_3.append(
                            row15.Name
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row15.Color != null) {
                        sb_tFileOutputDelimited_3.append(
                            row15.Color
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row15.Size != null) {
                        sb_tFileOutputDelimited_3.append(
                            row15.Size
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row15.Weight != null) {
                        sb_tFileOutputDelimited_3.append(
                            row15.Weight.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                        sb_tFileOutputDelimited_3.append(
                            row15.OrderQty
                        );
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                        sb_tFileOutputDelimited_3.append(
                            row15.UnitPrice
                        );
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                        sb_tFileOutputDelimited_3.append(
                            row15.UnitPriceDiscount
                        );
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                        sb_tFileOutputDelimited_3.append(
                            row15.SubTotal
                        );
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                        sb_tFileOutputDelimited_3.append(
                            row15.TaxAmt
                        );
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                        sb_tFileOutputDelimited_3.append(
                            row15.Freight
                        );
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                        sb_tFileOutputDelimited_3.append(
                            row15.TotalDue
                        );
                    sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);


                    nb_line_tFileOutputDelimited_3++;
                    resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

                        outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());




 


	tos_count_tFileOutputDelimited_3++;

/**
 * [tFileOutputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

 



/**
 * [tFileOutputDelimited_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

 



/**
 * [tFileOutputDelimited_3 process_data_end ] stop
 */

} // End of branch "row15"




	
	/**
	 * [tSampleRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tSampleRow_2";

	

 



/**
 * [tSampleRow_2 process_data_end ] stop
 */

} // End of branch "out2"




// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tSampleRow_3 main ] start
	 */

	

	
	
	currentComponent="tSampleRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out3");
					}
					

	
	nb_line_tSampleRow_3++;
	
 	if(!rangeSettSampleRow_3.contains(nb_line_tSampleRow_3)){        
            row18 = null;            	
 	}else{  	
 	   row18 = new row18Struct();
 	   

       row18.SalesOrderNumber = out3.SalesOrderNumber;
       

       row18.OrderDate = out3.OrderDate;
       

       row18.DueDate = out3.DueDate;
       

       row18.ShipDate = out3.ShipDate;
       

       row18.Status = out3.Status;
       

       row18.ShipMethod = out3.ShipMethod;
       

       row18.CompanyName = out3.CompanyName;
       

       row18.City = out3.City;
       

       row18.StateProvince = out3.StateProvince;
       

       row18.CountryRegion = out3.CountryRegion;
       

       row18.Name = out3.Name;
       

       row18.Color = out3.Color;
       

       row18.Size = out3.Size;
       

       row18.Weight = out3.Weight;
       

       row18.OrderQty = out3.OrderQty;
       

       row18.UnitPrice = out3.UnitPrice;
       

       row18.UnitPriceDiscount = out3.UnitPriceDiscount;
       

       row18.SubTotal = out3.SubTotal;
       

       row18.TaxAmt = out3.TaxAmt;
       

       row18.Freight = out3.Freight;
       

       row18.TotalDue = out3.TotalDue;
       
 	
 	}
 
 
 
 
 
 
 
 
 
 
 
 
 


	tos_count_tSampleRow_3++;

/**
 * [tSampleRow_3 main ] stop
 */
	
	/**
	 * [tSampleRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSampleRow_3";

	

 



/**
 * [tSampleRow_3 process_data_begin ] stop
 */
// Start of branch "row18"
if(row18 != null) { 



	
	/**
	 * [tFileOutputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row18");
					}
					


                    StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
                            if(row18.SalesOrderNumber != null) {
                        sb_tFileOutputDelimited_4.append(
                            row18.SalesOrderNumber
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row18.OrderDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            FormatterUtils.format_Date(row18.OrderDate, "yyyy-MM-dd'T'HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row18.DueDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            FormatterUtils.format_Date(row18.DueDate, "yyyy-MM-dd'T'HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row18.ShipDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            FormatterUtils.format_Date(row18.ShipDate, "yyyy-MM-dd'T'HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row18.Status != null) {
                        sb_tFileOutputDelimited_4.append(
                            row18.Status
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row18.ShipMethod != null) {
                        sb_tFileOutputDelimited_4.append(
                            row18.ShipMethod
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row18.CompanyName != null) {
                        sb_tFileOutputDelimited_4.append(
                            row18.CompanyName
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row18.City != null) {
                        sb_tFileOutputDelimited_4.append(
                            row18.City
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row18.StateProvince != null) {
                        sb_tFileOutputDelimited_4.append(
                            row18.StateProvince
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row18.CountryRegion != null) {
                        sb_tFileOutputDelimited_4.append(
                            row18.CountryRegion
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row18.Name != null) {
                        sb_tFileOutputDelimited_4.append(
                            row18.Name
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row18.Color != null) {
                        sb_tFileOutputDelimited_4.append(
                            row18.Color
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row18.Size != null) {
                        sb_tFileOutputDelimited_4.append(
                            row18.Size
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row18.Weight != null) {
                        sb_tFileOutputDelimited_4.append(
                            row18.Weight.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                        sb_tFileOutputDelimited_4.append(
                            row18.OrderQty
                        );
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                        sb_tFileOutputDelimited_4.append(
                            row18.UnitPrice
                        );
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                        sb_tFileOutputDelimited_4.append(
                            row18.UnitPriceDiscount
                        );
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                        sb_tFileOutputDelimited_4.append(
                            row18.SubTotal
                        );
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                        sb_tFileOutputDelimited_4.append(
                            row18.TaxAmt
                        );
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                        sb_tFileOutputDelimited_4.append(
                            row18.Freight
                        );
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                        sb_tFileOutputDelimited_4.append(
                            row18.TotalDue
                        );
                    sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);


                    nb_line_tFileOutputDelimited_4++;
                    resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

                        outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());




 


	tos_count_tFileOutputDelimited_4++;

/**
 * [tFileOutputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_end ] stop
 */

} // End of branch "row18"




	
	/**
	 * [tSampleRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tSampleRow_3";

	

 



/**
 * [tSampleRow_3 process_data_end ] stop
 */

} // End of branch "out3"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tFilterColumns_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterColumns_2";

	

 



/**
 * [tFilterColumns_2 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tFileInputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	



            }
            }finally{
                if(!((Object)(context.LocalPath+context.SalesOrderDetail_Harmonized) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_2!=null){
                		fid_tFileInputDelimited_2.close();
                	}
                }
                if(fid_tFileInputDelimited_2!=null){
                	globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tFilterColumns_2 end ] start
	 */

	

	
	
	currentComponent="tFilterColumns_2";

	

globalMap.put("tFilterColumns_2_NB_LINE",nb_line_tFilterColumns_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tFilterColumns_2", true);
end_Hash.put("tFilterColumns_2", System.currentTimeMillis());




/**
 * [tFilterColumns_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row4 != null) {
						tHash_Lookup_row4.endGet();
					}
					globalMap.remove( "tHash_Lookup_row4" );

					
					
				
					if(tHash_Lookup_row8 != null) {
						tHash_Lookup_row8.endGet();
					}
					globalMap.remove( "tHash_Lookup_row8" );

					
					
				
					if(tHash_Lookup_row9 != null) {
						tHash_Lookup_row9.endGet();
					}
					globalMap.remove( "tHash_Lookup_row9" );

					
					
				
					if(tHash_Lookup_row10 != null) {
						tHash_Lookup_row10.endGet();
					}
					globalMap.remove( "tHash_Lookup_row10" );

					
					
				
					if(tHash_Lookup_row11 != null) {
						tHash_Lookup_row11.endGet();
					}
					globalMap.remove( "tHash_Lookup_row11" );

					
					
				
					if(tHash_Lookup_row13 != null) {
						tHash_Lookup_row13.endGet();
					}
					globalMap.remove( "tHash_Lookup_row13" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tSampleRow_1 end ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tSampleRow_1", true);
end_Hash.put("tSampleRow_1", System.currentTimeMillis());




/**
 * [tSampleRow_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */







	
	/**
	 * [tSampleRow_2 end ] start
	 */

	

	
	
	currentComponent="tSampleRow_2";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tSampleRow_2", true);
end_Hash.put("tSampleRow_2", System.currentTimeMillis());




/**
 * [tSampleRow_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	



		
			
					if(outtFileOutputDelimited_3!=null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}
				
				globalMap.put("tFileOutputDelimited_3_NB_LINE",nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_3", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_3", true);
end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_3 end ] stop
 */







	
	/**
	 * [tSampleRow_3 end ] start
	 */

	

	
	
	currentComponent="tSampleRow_3";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out3");
			  	}
			  	
 

ok_Hash.put("tSampleRow_3", true);
end_Hash.put("tSampleRow_3", System.currentTimeMillis());




/**
 * [tSampleRow_3 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	



		
			
					if(outtFileOutputDelimited_4!=null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}
				
				globalMap.put("tFileOutputDelimited_4_NB_LINE",nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_4", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_4", true);
end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_4 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row4"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row8"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row9"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row10"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row11"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row13"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tFilterColumns_2 finally ] start
	 */

	

	
	
	currentComponent="tFilterColumns_2";

	

 



/**
 * [tFilterColumns_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tSampleRow_1 finally ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";

	

 



/**
 * [tSampleRow_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */







	
	/**
	 * [tSampleRow_2 finally ] start
	 */

	

	
	
	currentComponent="tSampleRow_2";

	

 



/**
 * [tSampleRow_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	


		if(resourceMap.get("finish_tFileOutputDelimited_3") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_3");
						if(outtFileOutputDelimited_3!=null) {
							outtFileOutputDelimited_3.flush();
							outtFileOutputDelimited_3.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_3 finally ] stop
 */







	
	/**
	 * [tSampleRow_3 finally ] start
	 */

	

	
	
	currentComponent="tSampleRow_3";

	

 



/**
 * [tSampleRow_3 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	


		if(resourceMap.get("finish_tFileOutputDelimited_4") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_4");
						if(outtFileOutputDelimited_4!=null) {
							outtFileOutputDelimited_4.flush();
							outtFileOutputDelimited_4.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_4 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
    final static byte[] commonByteArrayLock_TRAB_FINAL_Curated_DS_Data = new byte[0];
    static byte[] commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SalesOrderID;

				public int getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public java.util.Date DueDate;

				public java.util.Date getDueDate () {
					return this.DueDate;
				}
				
			    public java.util.Date ShipDate;

				public java.util.Date getShipDate () {
					return this.ShipDate;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public String SalesType;

				public String getSalesType () {
					return this.SalesType;
				}
				
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public Integer ShipToAddressID;

				public Integer getShipToAddressID () {
					return this.ShipToAddressID;
				}
				
			    public Integer BillToAddressID;

				public Integer getBillToAddressID () {
					return this.BillToAddressID;
				}
				
			    public String ShipMethod;

				public String getShipMethod () {
					return this.ShipMethod;
				}
				
			    public double SubTotal;

				public double getSubTotal () {
					return this.SubTotal;
				}
				
			    public double TaxAmt;

				public double getTaxAmt () {
					return this.TaxAmt;
				}
				
			    public double Freight;

				public double getFreight () {
					return this.Freight;
				}
				
			    public double TotalDue;

				public double getTotalDue () {
					return this.TotalDue;
				}
				
			    public String SalesOrderNumber;

				public String getSalesOrderNumber () {
					return this.SalesOrderNumber;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SalesOrderID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.SalesOrderID != other.SalesOrderID)
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.SalesOrderID = this.SalesOrderID;
	            other.OrderDate = this.OrderDate;
	            other.DueDate = this.DueDate;
	            other.ShipDate = this.ShipDate;
	            other.Status = this.Status;
	            other.SalesType = this.SalesType;
	            other.CustomerID = this.CustomerID;
	            other.ShipToAddressID = this.ShipToAddressID;
	            other.BillToAddressID = this.BillToAddressID;
	            other.ShipMethod = this.ShipMethod;
	            other.SubTotal = this.SubTotal;
	            other.TaxAmt = this.TaxAmt;
	            other.Freight = this.Freight;
	            other.TotalDue = this.TotalDue;
	            other.SalesOrderNumber = this.SalesOrderNumber;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.SalesOrderID = this.SalesOrderID;
	            	
	}




	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TRAB_FINAL_Curated_DS_Data) {

        	try {

        		int length = 0;
		
			        this.SalesOrderID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SalesOrderID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.OrderDate = readDate(dis,ois);
					
						this.DueDate = readDate(dis,ois);
					
						this.ShipDate = readDate(dis,ois);
					
						this.Status = readString(dis,ois);
					
						this.SalesType = readString(dis,ois);
					
			            this.CustomerID = dis.readInt();
					
						this.ShipToAddressID = readInteger(dis,ois);
					
						this.BillToAddressID = readInteger(dis,ois);
					
						this.ShipMethod = readString(dis,ois);
					
			            this.SubTotal = dis.readDouble();
					
			            this.TaxAmt = dis.readDouble();
					
			            this.Freight = dis.readDouble();
					
			            this.TotalDue = dis.readDouble();
					
						this.SalesOrderNumber = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeDate(this.OrderDate, dos, oos);
					
						writeDate(this.DueDate, dos, oos);
					
						writeDate(this.ShipDate, dos, oos);
					
						writeString(this.Status, dos, oos);
					
						writeString(this.SalesType, dos, oos);
					
		            	dos.writeInt(this.CustomerID);
					
					writeInteger(this.ShipToAddressID, dos, oos);
					
					writeInteger(this.BillToAddressID, dos, oos);
					
						writeString(this.ShipMethod, dos, oos);
					
		            	dos.writeDouble(this.SubTotal);
					
		            	dos.writeDouble(this.TaxAmt);
					
		            	dos.writeDouble(this.Freight);
					
		            	dos.writeDouble(this.TotalDue);
					
						writeString(this.SalesOrderNumber, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",OrderDate="+String.valueOf(OrderDate));
		sb.append(",DueDate="+String.valueOf(DueDate));
		sb.append(",ShipDate="+String.valueOf(ShipDate));
		sb.append(",Status="+Status);
		sb.append(",SalesType="+SalesType);
		sb.append(",CustomerID="+String.valueOf(CustomerID));
		sb.append(",ShipToAddressID="+String.valueOf(ShipToAddressID));
		sb.append(",BillToAddressID="+String.valueOf(BillToAddressID));
		sb.append(",ShipMethod="+ShipMethod);
		sb.append(",SubTotal="+String.valueOf(SubTotal));
		sb.append(",TaxAmt="+String.valueOf(TaxAmt));
		sb.append(",Freight="+String.valueOf(Freight));
		sb.append(",TotalDue="+String.valueOf(TotalDue));
		sb.append(",SalesOrderNumber="+SalesOrderNumber);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_TRAB_FINAL_Curated_DS_Data = new byte[0];
    static byte[] commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SalesOrderID;

				public int getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public java.util.Date DueDate;

				public java.util.Date getDueDate () {
					return this.DueDate;
				}
				
			    public java.util.Date ShipDate;

				public java.util.Date getShipDate () {
					return this.ShipDate;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public String SalesType;

				public String getSalesType () {
					return this.SalesType;
				}
				
			    public String SalesOrderNumber;

				public String getSalesOrderNumber () {
					return this.SalesOrderNumber;
				}
				
			    public String PurchaseOrderNumber;

				public String getPurchaseOrderNumber () {
					return this.PurchaseOrderNumber;
				}
				
			    public String AccountNumber;

				public String getAccountNumber () {
					return this.AccountNumber;
				}
				
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public Integer ShipToAddressID;

				public Integer getShipToAddressID () {
					return this.ShipToAddressID;
				}
				
			    public Integer BillToAddressID;

				public Integer getBillToAddressID () {
					return this.BillToAddressID;
				}
				
			    public String ShipMethod;

				public String getShipMethod () {
					return this.ShipMethod;
				}
				
			    public double SubTotal;

				public double getSubTotal () {
					return this.SubTotal;
				}
				
			    public double TaxAmt;

				public double getTaxAmt () {
					return this.TaxAmt;
				}
				
			    public double Freight;

				public double getFreight () {
					return this.Freight;
				}
				
			    public double TotalDue;

				public double getTotalDue () {
					return this.TotalDue;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SalesOrderID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.SalesOrderID != other.SalesOrderID)
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.SalesOrderID = this.SalesOrderID;
	            other.OrderDate = this.OrderDate;
	            other.DueDate = this.DueDate;
	            other.ShipDate = this.ShipDate;
	            other.Status = this.Status;
	            other.SalesType = this.SalesType;
	            other.SalesOrderNumber = this.SalesOrderNumber;
	            other.PurchaseOrderNumber = this.PurchaseOrderNumber;
	            other.AccountNumber = this.AccountNumber;
	            other.CustomerID = this.CustomerID;
	            other.ShipToAddressID = this.ShipToAddressID;
	            other.BillToAddressID = this.BillToAddressID;
	            other.ShipMethod = this.ShipMethod;
	            other.SubTotal = this.SubTotal;
	            other.TaxAmt = this.TaxAmt;
	            other.Freight = this.Freight;
	            other.TotalDue = this.TotalDue;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.SalesOrderID = this.SalesOrderID;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TRAB_FINAL_Curated_DS_Data.length) {
				if(length < 1024 && commonByteArray_TRAB_FINAL_Curated_DS_Data.length == 0) {
   					commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[1024];
				} else {
   					commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TRAB_FINAL_Curated_DS_Data, 0, length);
			strReturn = new String(commonByteArray_TRAB_FINAL_Curated_DS_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TRAB_FINAL_Curated_DS_Data) {

        	try {

        		int length = 0;
		
			        this.SalesOrderID = dis.readInt();
					
					this.OrderDate = readDate(dis);
					
					this.DueDate = readDate(dis);
					
					this.ShipDate = readDate(dis);
					
					this.Status = readString(dis);
					
					this.SalesType = readString(dis);
					
					this.SalesOrderNumber = readString(dis);
					
					this.PurchaseOrderNumber = readString(dis);
					
					this.AccountNumber = readString(dis);
					
			        this.CustomerID = dis.readInt();
					
						this.ShipToAddressID = readInteger(dis);
					
						this.BillToAddressID = readInteger(dis);
					
					this.ShipMethod = readString(dis);
					
			        this.SubTotal = dis.readDouble();
					
			        this.TaxAmt = dis.readDouble();
					
			        this.Freight = dis.readDouble();
					
			        this.TotalDue = dis.readDouble();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SalesOrderID);
					
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// java.util.Date
				
						writeDate(this.DueDate,dos);
					
					// java.util.Date
				
						writeDate(this.ShipDate,dos);
					
					// String
				
						writeString(this.Status,dos);
					
					// String
				
						writeString(this.SalesType,dos);
					
					// String
				
						writeString(this.SalesOrderNumber,dos);
					
					// String
				
						writeString(this.PurchaseOrderNumber,dos);
					
					// String
				
						writeString(this.AccountNumber,dos);
					
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// Integer
				
						writeInteger(this.ShipToAddressID,dos);
					
					// Integer
				
						writeInteger(this.BillToAddressID,dos);
					
					// String
				
						writeString(this.ShipMethod,dos);
					
					// double
				
		            	dos.writeDouble(this.SubTotal);
					
					// double
				
		            	dos.writeDouble(this.TaxAmt);
					
					// double
				
		            	dos.writeDouble(this.Freight);
					
					// double
				
		            	dos.writeDouble(this.TotalDue);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",OrderDate="+String.valueOf(OrderDate));
		sb.append(",DueDate="+String.valueOf(DueDate));
		sb.append(",ShipDate="+String.valueOf(ShipDate));
		sb.append(",Status="+Status);
		sb.append(",SalesType="+SalesType);
		sb.append(",SalesOrderNumber="+SalesOrderNumber);
		sb.append(",PurchaseOrderNumber="+PurchaseOrderNumber);
		sb.append(",AccountNumber="+AccountNumber);
		sb.append(",CustomerID="+String.valueOf(CustomerID));
		sb.append(",ShipToAddressID="+String.valueOf(ShipToAddressID));
		sb.append(",BillToAddressID="+String.valueOf(BillToAddressID));
		sb.append(",ShipMethod="+ShipMethod);
		sb.append(",SubTotal="+String.valueOf(SubTotal));
		sb.append(",TaxAmt="+String.valueOf(TaxAmt));
		sb.append(",Freight="+String.valueOf(Freight));
		sb.append(",TotalDue="+String.valueOf(TotalDue));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row4Struct row4 = new row4Struct();





	
	/**
	 * [tAdvancedHash_row4 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row4", false);
		start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tAdvancedHash_row4 = 0;
		

			   		// connection name:row4
			   		// source node:tFilterColumns_1 - inputs:(row1) outputs:(row4,row4) | target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
			   		// linked node: tMap_1 - inputs:(row2,row4,row8,row9,row10,row11,row13) outputs:(out1,out2,out3)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row4Struct>getLookup(matchingModeEnum_row4);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row4 begin ] stop
 */



	
	/**
	 * [tFilterColumns_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterColumns_1", false);
		start_Hash.put("tFilterColumns_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterColumns_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tFilterColumns_1 = 0;
		


 int nb_line_tFilterColumns_1 = 0;
 



/**
 * [tFilterColumns_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = context.LocalPath+context.SalesOrderHeader_Harmonized;
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(context.LocalPath+context.SalesOrderHeader_Harmonized, "UTF-8",";","\n",true,1,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row1 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row1 = new row1Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.SalesOrderID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"SalesOrderID", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
								try {
									row1.SalesOrderID = 0;
								} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't set default value for column '%s' in '%s'. Details: %s",
										"SalesOrderID", "row1", ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									row1.OrderDate = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd'T'HH:mm:ss");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"OrderDate", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.OrderDate = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									row1.DueDate = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd'T'HH:mm:ss");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"DueDate", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.DueDate = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									row1.ShipDate = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd'T'HH:mm:ss");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ShipDate", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.ShipDate = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
							row1.Status = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
							row1.SalesType = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 6;
					
							row1.SalesOrderNumber = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 7;
					
							row1.PurchaseOrderNumber = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 8;
					
							row1.AccountNumber = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 9;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.CustomerID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CustomerID", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
								try {
									row1.CustomerID = 0;
								} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't set default value for column '%s' in '%s'. Details: %s",
										"CustomerID", "row1", ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 10;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.ShipToAddressID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ShipToAddressID", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.ShipToAddressID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 11;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.BillToAddressID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"BillToAddressID", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.BillToAddressID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 12;
					
							row1.ShipMethod = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 13;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.SubTotal = ParserUtils.parseTo_double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"SubTotal", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
								try {
									row1.SubTotal = 0;
								} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't set default value for column '%s' in '%s'. Details: %s",
										"SubTotal", "row1", ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 14;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.TaxAmt = ParserUtils.parseTo_double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"TaxAmt", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
								try {
									row1.TaxAmt = 0;
								} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't set default value for column '%s' in '%s'. Details: %s",
										"TaxAmt", "row1", ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 15;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.Freight = ParserUtils.parseTo_double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Freight", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
								try {
									row1.Freight = 0;
								} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't set default value for column '%s' in '%s'. Details: %s",
										"Freight", "row1", ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 16;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.TotalDue = ParserUtils.parseTo_double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"TotalDue", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
								try {
									row1.TotalDue = 0;
								} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't set default value for column '%s' in '%s'. Details: %s",
										"TotalDue", "row1", ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 17;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									row1.ModifiedDate = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd'T'HH:mm:ss");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ModifiedDate", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.ModifiedDate = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row1 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tFilterColumns_1 main ] start
	 */

	

	
	
	currentComponent="tFilterColumns_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					
	

	row4.SalesOrderID = row1.SalesOrderID;

	
	row4.OrderDate = row1.OrderDate;

	
	row4.DueDate = row1.DueDate;

	
	row4.ShipDate = row1.ShipDate;

	
	row4.Status = row1.Status;

	
	row4.SalesType = row1.SalesType;

	
	row4.CustomerID = row1.CustomerID;

	
	row4.ShipToAddressID = row1.ShipToAddressID;

	
	row4.BillToAddressID = row1.BillToAddressID;

	
	row4.ShipMethod = row1.ShipMethod;

	
	row4.SubTotal = row1.SubTotal;

	
	row4.TaxAmt = row1.TaxAmt;

	
	row4.Freight = row1.Freight;

	
	row4.TotalDue = row1.TotalDue;

	
	row4.SalesOrderNumber = row1.SalesOrderNumber;

	
    nb_line_tFilterColumns_1++;

 


	tos_count_tFilterColumns_1++;

/**
 * [tFilterColumns_1 main ] stop
 */
	
	/**
	 * [tFilterColumns_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterColumns_1";

	

 



/**
 * [tFilterColumns_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					


			   
			   

					row4Struct row4_HashRow = new row4Struct();
		   	   	   
				
				row4_HashRow.SalesOrderID = row4.SalesOrderID;
				
				row4_HashRow.OrderDate = row4.OrderDate;
				
				row4_HashRow.DueDate = row4.DueDate;
				
				row4_HashRow.ShipDate = row4.ShipDate;
				
				row4_HashRow.Status = row4.Status;
				
				row4_HashRow.SalesType = row4.SalesType;
				
				row4_HashRow.CustomerID = row4.CustomerID;
				
				row4_HashRow.ShipToAddressID = row4.ShipToAddressID;
				
				row4_HashRow.BillToAddressID = row4.BillToAddressID;
				
				row4_HashRow.ShipMethod = row4.ShipMethod;
				
				row4_HashRow.SubTotal = row4.SubTotal;
				
				row4_HashRow.TaxAmt = row4.TaxAmt;
				
				row4_HashRow.Freight = row4.Freight;
				
				row4_HashRow.TotalDue = row4.TotalDue;
				
				row4_HashRow.SalesOrderNumber = row4.SalesOrderNumber;
				
			tHash_Lookup_row4.put(row4_HashRow);
			
            




 


	tos_count_tAdvancedHash_row4++;

/**
 * [tAdvancedHash_row4 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_end ] stop
 */



	
	/**
	 * [tFilterColumns_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterColumns_1";

	

 



/**
 * [tFilterColumns_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)(context.LocalPath+context.SalesOrderHeader_Harmonized) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tFilterColumns_1 end ] start
	 */

	

	
	
	currentComponent="tFilterColumns_1";

	

globalMap.put("tFilterColumns_1_NB_LINE",nb_line_tFilterColumns_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tFilterColumns_1", true);
end_Hash.put("tFilterColumns_1", System.currentTimeMillis());




/**
 * [tFilterColumns_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

tHash_Lookup_row4.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row4", true);
end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());




/**
 * [tAdvancedHash_row4 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tFilterColumns_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterColumns_1";

	

 



/**
 * [tFilterColumns_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableComparableLookupRow<row8Struct> {
    final static byte[] commonByteArrayLock_TRAB_FINAL_Curated_DS_Data = new byte[0];
    static byte[] commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public String FirstName;

				public String getFirstName () {
					return this.FirstName;
				}
				
			    public String MiddleName;

				public String getMiddleName () {
					return this.MiddleName;
				}
				
			    public String LastName;

				public String getLastName () {
					return this.LastName;
				}
				
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String SalesPerson;

				public String getSalesPerson () {
					return this.SalesPerson;
				}
				
			    public String EmailAddress;

				public String getEmailAddress () {
					return this.EmailAddress;
				}
				
			    public String Phone;

				public String getPhone () {
					return this.Phone;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.CustomerID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.CustomerID != other.CustomerID)
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.CustomerID = this.CustomerID;
	            other.FirstName = this.FirstName;
	            other.MiddleName = this.MiddleName;
	            other.LastName = this.LastName;
	            other.CompanyName = this.CompanyName;
	            other.SalesPerson = this.SalesPerson;
	            other.EmailAddress = this.EmailAddress;
	            other.Phone = this.Phone;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.CustomerID = this.CustomerID;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TRAB_FINAL_Curated_DS_Data) {

        	try {

        		int length = 0;
		
			        this.CustomerID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.CustomerID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.FirstName = readString(dis,ois);
					
						this.MiddleName = readString(dis,ois);
					
						this.LastName = readString(dis,ois);
					
						this.CompanyName = readString(dis,ois);
					
						this.SalesPerson = readString(dis,ois);
					
						this.EmailAddress = readString(dis,ois);
					
						this.Phone = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.FirstName, dos, oos);
					
						writeString(this.MiddleName, dos, oos);
					
						writeString(this.LastName, dos, oos);
					
						writeString(this.CompanyName, dos, oos);
					
						writeString(this.SalesPerson, dos, oos);
					
						writeString(this.EmailAddress, dos, oos);
					
						writeString(this.Phone, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",FirstName="+FirstName);
		sb.append(",MiddleName="+MiddleName);
		sb.append(",LastName="+LastName);
		sb.append(",CompanyName="+CompanyName);
		sb.append(",SalesPerson="+SalesPerson);
		sb.append(",EmailAddress="+EmailAddress);
		sb.append(",Phone="+Phone);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_TRAB_FINAL_Curated_DS_Data = new byte[0];
    static byte[] commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public String FirstName;

				public String getFirstName () {
					return this.FirstName;
				}
				
			    public String MiddleName;

				public String getMiddleName () {
					return this.MiddleName;
				}
				
			    public String LastName;

				public String getLastName () {
					return this.LastName;
				}
				
			    public String Suffix;

				public String getSuffix () {
					return this.Suffix;
				}
				
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String SalesPerson;

				public String getSalesPerson () {
					return this.SalesPerson;
				}
				
			    public String EmailAddress;

				public String getEmailAddress () {
					return this.EmailAddress;
				}
				
			    public String Phone;

				public String getPhone () {
					return this.Phone;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.CustomerID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row5Struct other = (row5Struct) obj;
		
						if (this.CustomerID != other.CustomerID)
							return false;
					

		return true;
    }

	public void copyDataTo(row5Struct other) {

		other.CustomerID = this.CustomerID;
	            other.FirstName = this.FirstName;
	            other.MiddleName = this.MiddleName;
	            other.LastName = this.LastName;
	            other.Suffix = this.Suffix;
	            other.CompanyName = this.CompanyName;
	            other.SalesPerson = this.SalesPerson;
	            other.EmailAddress = this.EmailAddress;
	            other.Phone = this.Phone;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(row5Struct other) {

		other.CustomerID = this.CustomerID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TRAB_FINAL_Curated_DS_Data.length) {
				if(length < 1024 && commonByteArray_TRAB_FINAL_Curated_DS_Data.length == 0) {
   					commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[1024];
				} else {
   					commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TRAB_FINAL_Curated_DS_Data, 0, length);
			strReturn = new String(commonByteArray_TRAB_FINAL_Curated_DS_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TRAB_FINAL_Curated_DS_Data) {

        	try {

        		int length = 0;
		
			        this.CustomerID = dis.readInt();
					
					this.FirstName = readString(dis);
					
					this.MiddleName = readString(dis);
					
					this.LastName = readString(dis);
					
					this.Suffix = readString(dis);
					
					this.CompanyName = readString(dis);
					
					this.SalesPerson = readString(dis);
					
					this.EmailAddress = readString(dis);
					
					this.Phone = readString(dis);
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// String
				
						writeString(this.FirstName,dos);
					
					// String
				
						writeString(this.MiddleName,dos);
					
					// String
				
						writeString(this.LastName,dos);
					
					// String
				
						writeString(this.Suffix,dos);
					
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.SalesPerson,dos);
					
					// String
				
						writeString(this.EmailAddress,dos);
					
					// String
				
						writeString(this.Phone,dos);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",FirstName="+FirstName);
		sb.append(",MiddleName="+MiddleName);
		sb.append(",LastName="+LastName);
		sb.append(",Suffix="+Suffix);
		sb.append(",CompanyName="+CompanyName);
		sb.append(",SalesPerson="+SalesPerson);
		sb.append(",EmailAddress="+EmailAddress);
		sb.append(",Phone="+Phone);
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
row8Struct row8 = new row8Struct();





	
	/**
	 * [tAdvancedHash_row8 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row8", false);
		start_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tAdvancedHash_row8 = 0;
		

			   		// connection name:row8
			   		// source node:tFilterColumns_4 - inputs:(row5) outputs:(row8,row8) | target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
			   		// linked node: tMap_1 - inputs:(row2,row4,row8,row9,row10,row11,row13) outputs:(out1,out2,out3)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row8Struct>getLookup(matchingModeEnum_row8);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row8 begin ] stop
 */



	
	/**
	 * [tFilterColumns_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterColumns_4", false);
		start_Hash.put("tFilterColumns_4", System.currentTimeMillis());
		
	
	currentComponent="tFilterColumns_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tFilterColumns_4 = 0;
		


 int nb_line_tFilterColumns_4 = 0;
 



/**
 * [tFilterColumns_4 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_4", false);
		start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_4";

	
		int tos_count_tFileInputDelimited_4 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				int limit_tFileInputDelimited_4 = -1;
				try{
					
						Object filename_tFileInputDelimited_4 = context.LocalPath+context.Customer_Harmonized;
						if(filename_tFileInputDelimited_4 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_4 = 0, random_value_tFileInputDelimited_4 = -1;
			if(footer_value_tFileInputDelimited_4 >0 || random_value_tFileInputDelimited_4 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited(context.LocalPath+context.Customer_Harmonized, "UTF-8",";","\n",true,1,0,
									limit_tFileInputDelimited_4
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_4!=null && fid_tFileInputDelimited_4.nextRecord()) {
						rowstate_tFileInputDelimited_4.reset();
						
			    						row5 = null;			
												
									boolean whetherReject_tFileInputDelimited_4 = false;
									row5 = new row5Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_4 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_4 = 0;
					
						temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						if(temp.length() > 0) {
							
								try {
								
    								row5.CustomerID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_4) {
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CustomerID", "row5", temp, ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
								}
    							
						} else {						
							
								
								try {
									row5.CustomerID = 0;
								} catch(java.lang.Exception ex_tFileInputDelimited_4) {
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't set default value for column '%s' in '%s'. Details: %s",
										"CustomerID", "row5", ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
								}
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_4 = 1;
					
							row5.FirstName = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 2;
					
							row5.MiddleName = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 3;
					
							row5.LastName = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 4;
					
							row5.Suffix = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 5;
					
							row5.CompanyName = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 6;
					
							row5.SalesPerson = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 7;
					
							row5.EmailAddress = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 8;
					
							row5.Phone = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 9;
					
						temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						if(temp.length() > 0) {
							
								try {
								
    									row5.ModifiedDate = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd'T'HH:mm:ss");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_4) {
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ModifiedDate", "row5", temp, ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
								}
    							
						} else {						
							
								
									row5.ModifiedDate = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_4.getException()!=null) {
											throw rowstate_tFileInputDelimited_4.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_4 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row5 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_4 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 


	tos_count_tFileInputDelimited_4++;

/**
 * [tFileInputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tFilterColumns_4 main ] start
	 */

	

	
	
	currentComponent="tFilterColumns_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					
	

	row8.CustomerID = row5.CustomerID;

	
	row8.FirstName = row5.FirstName;

	
	row8.MiddleName = row5.MiddleName;

	
	row8.LastName = row5.LastName;

	
	row8.CompanyName = row5.CompanyName;

	
	row8.SalesPerson = row5.SalesPerson;

	
	row8.EmailAddress = row5.EmailAddress;

	
	row8.Phone = row5.Phone;

	
    nb_line_tFilterColumns_4++;

 


	tos_count_tFilterColumns_4++;

/**
 * [tFilterColumns_4 main ] stop
 */
	
	/**
	 * [tFilterColumns_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterColumns_4";

	

 



/**
 * [tFilterColumns_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					


			   
			   

					row8Struct row8_HashRow = new row8Struct();
		   	   	   
				
				row8_HashRow.CustomerID = row8.CustomerID;
				
				row8_HashRow.FirstName = row8.FirstName;
				
				row8_HashRow.MiddleName = row8.MiddleName;
				
				row8_HashRow.LastName = row8.LastName;
				
				row8_HashRow.CompanyName = row8.CompanyName;
				
				row8_HashRow.SalesPerson = row8.SalesPerson;
				
				row8_HashRow.EmailAddress = row8.EmailAddress;
				
				row8_HashRow.Phone = row8.Phone;
				
			tHash_Lookup_row8.put(row8_HashRow);
			
            




 


	tos_count_tAdvancedHash_row8++;

/**
 * [tAdvancedHash_row8 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 process_data_end ] stop
 */



	
	/**
	 * [tFilterColumns_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterColumns_4";

	

 



/**
 * [tFilterColumns_4 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tFileInputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	



            }
            }finally{
                if(!((Object)(context.LocalPath+context.Customer_Harmonized) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_4!=null){
                		fid_tFileInputDelimited_4.close();
                	}
                }
                if(fid_tFileInputDelimited_4!=null){
                	globalMap.put("tFileInputDelimited_4_NB_LINE", fid_tFileInputDelimited_4.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_4", true);
end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());




/**
 * [tFileInputDelimited_4 end ] stop
 */

	
	/**
	 * [tFilterColumns_4 end ] start
	 */

	

	
	
	currentComponent="tFilterColumns_4";

	

globalMap.put("tFilterColumns_4_NB_LINE",nb_line_tFilterColumns_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tFilterColumns_4", true);
end_Hash.put("tFilterColumns_4", System.currentTimeMillis());




/**
 * [tFilterColumns_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

tHash_Lookup_row8.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row8", true);
end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());




/**
 * [tAdvancedHash_row8 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 finally ] stop
 */

	
	/**
	 * [tFilterColumns_4 finally ] start
	 */

	

	
	
	currentComponent="tFilterColumns_4";

	

 



/**
 * [tFilterColumns_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableComparableLookupRow<row9Struct> {
    final static byte[] commonByteArrayLock_TRAB_FINAL_Curated_DS_Data = new byte[0];
    static byte[] commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public int AddressID;

				public int getAddressID () {
					return this.AddressID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.CustomerID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.CustomerID != other.CustomerID)
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.CustomerID = this.CustomerID;
	            other.AddressID = this.AddressID;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.CustomerID = this.CustomerID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TRAB_FINAL_Curated_DS_Data) {

        	try {

        		int length = 0;
		
			        this.CustomerID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.CustomerID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.AddressID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.AddressID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",AddressID="+String.valueOf(AddressID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_TRAB_FINAL_Curated_DS_Data = new byte[0];
    static byte[] commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public int AddressID;

				public int getAddressID () {
					return this.AddressID;
				}
				
			    public String AddressType;

				public String getAddressType () {
					return this.AddressType;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.CustomerID;
						
							result = prime * result + (int) this.AddressID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.CustomerID != other.CustomerID)
							return false;
					
						if (this.AddressID != other.AddressID)
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.CustomerID = this.CustomerID;
	            other.AddressID = this.AddressID;
	            other.AddressType = this.AddressType;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.CustomerID = this.CustomerID;
	            	other.AddressID = this.AddressID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TRAB_FINAL_Curated_DS_Data.length) {
				if(length < 1024 && commonByteArray_TRAB_FINAL_Curated_DS_Data.length == 0) {
   					commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[1024];
				} else {
   					commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TRAB_FINAL_Curated_DS_Data, 0, length);
			strReturn = new String(commonByteArray_TRAB_FINAL_Curated_DS_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TRAB_FINAL_Curated_DS_Data) {

        	try {

        		int length = 0;
		
			        this.CustomerID = dis.readInt();
					
			        this.AddressID = dis.readInt();
					
					this.AddressType = readString(dis);
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// int
				
		            	dos.writeInt(this.AddressID);
					
					// String
				
						writeString(this.AddressType,dos);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",AddressID="+String.valueOf(AddressID));
		sb.append(",AddressType="+AddressType);
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.AddressID, other.AddressID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
row9Struct row9 = new row9Struct();





	
	/**
	 * [tAdvancedHash_row9 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row9", false);
		start_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tAdvancedHash_row9 = 0;
		

			   		// connection name:row9
			   		// source node:tFilterColumns_5 - inputs:(row6) outputs:(row9,row9) | target node:tAdvancedHash_row9 - inputs:(row9) outputs:()
			   		// linked node: tMap_1 - inputs:(row2,row4,row8,row9,row10,row11,row13) outputs:(out1,out2,out3)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row9Struct>getLookup(matchingModeEnum_row9);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row9 begin ] stop
 */



	
	/**
	 * [tFilterColumns_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterColumns_5", false);
		start_Hash.put("tFilterColumns_5", System.currentTimeMillis());
		
	
	currentComponent="tFilterColumns_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tFilterColumns_5 = 0;
		


 int nb_line_tFilterColumns_5 = 0;
 



/**
 * [tFilterColumns_5 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_5", false);
		start_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_5";

	
		int tos_count_tFileInputDelimited_5 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_5 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_5 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_5 = null;
				int limit_tFileInputDelimited_5 = -1;
				try{
					
						Object filename_tFileInputDelimited_5 = context.LocalPath+context.CustomerAddress_Harmonized;
						if(filename_tFileInputDelimited_5 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_5 = 0, random_value_tFileInputDelimited_5 = -1;
			if(footer_value_tFileInputDelimited_5 >0 || random_value_tFileInputDelimited_5 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_5 = new org.talend.fileprocess.FileInputDelimited(context.LocalPath+context.CustomerAddress_Harmonized, "UTF-8",";","\n",true,1,0,
									limit_tFileInputDelimited_5
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_5!=null && fid_tFileInputDelimited_5.nextRecord()) {
						rowstate_tFileInputDelimited_5.reset();
						
			    						row6 = null;			
												
									boolean whetherReject_tFileInputDelimited_5 = false;
									row6 = new row6Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_5 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_5 = 0;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row6.CustomerID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CustomerID", "row6", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
								try {
									row6.CustomerID = 0;
								} catch(java.lang.Exception ex_tFileInputDelimited_5) {
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't set default value for column '%s' in '%s'. Details: %s",
										"CustomerID", "row6", ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 1;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								row6.AddressID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"AddressID", "row6", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
								try {
									row6.AddressID = 0;
								} catch(java.lang.Exception ex_tFileInputDelimited_5) {
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't set default value for column '%s' in '%s'. Details: %s",
										"AddressID", "row6", ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 2;
					
							row6.AddressType = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 3;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    									row6.ModifiedDate = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd'T'HH:mm:ss");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ModifiedDate", "row6", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									row6.ModifiedDate = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_5.getException()!=null) {
											throw rowstate_tFileInputDelimited_5.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_5 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row6 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_5 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 


	tos_count_tFileInputDelimited_5++;

/**
 * [tFileInputDelimited_5 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tFilterColumns_5 main ] start
	 */

	

	
	
	currentComponent="tFilterColumns_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					
	

	row9.CustomerID = row6.CustomerID;

	
	row9.AddressID = row6.AddressID;

	
    nb_line_tFilterColumns_5++;

 


	tos_count_tFilterColumns_5++;

/**
 * [tFilterColumns_5 main ] stop
 */
	
	/**
	 * [tFilterColumns_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterColumns_5";

	

 



/**
 * [tFilterColumns_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row9");
					}
					


			   
			   

					row9Struct row9_HashRow = new row9Struct();
		   	   	   
				
				row9_HashRow.CustomerID = row9.CustomerID;
				
				row9_HashRow.AddressID = row9.AddressID;
				
			tHash_Lookup_row9.put(row9_HashRow);
			
            




 


	tos_count_tAdvancedHash_row9++;

/**
 * [tAdvancedHash_row9 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 process_data_end ] stop
 */



	
	/**
	 * [tFilterColumns_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterColumns_5";

	

 



/**
 * [tFilterColumns_5 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tFileInputDelimited_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	



            }
            }finally{
                if(!((Object)(context.LocalPath+context.CustomerAddress_Harmonized) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_5!=null){
                		fid_tFileInputDelimited_5.close();
                	}
                }
                if(fid_tFileInputDelimited_5!=null){
                	globalMap.put("tFileInputDelimited_5_NB_LINE", fid_tFileInputDelimited_5.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_5", true);
end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());




/**
 * [tFileInputDelimited_5 end ] stop
 */

	
	/**
	 * [tFilterColumns_5 end ] start
	 */

	

	
	
	currentComponent="tFilterColumns_5";

	

globalMap.put("tFilterColumns_5_NB_LINE",nb_line_tFilterColumns_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tFilterColumns_5", true);
end_Hash.put("tFilterColumns_5", System.currentTimeMillis());




/**
 * [tFilterColumns_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

tHash_Lookup_row9.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row9", true);
end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());




/**
 * [tAdvancedHash_row9 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_5 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 finally ] stop
 */

	
	/**
	 * [tFilterColumns_5 finally ] start
	 */

	

	
	
	currentComponent="tFilterColumns_5";

	

 



/**
 * [tFilterColumns_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableComparableLookupRow<row10Struct> {
    final static byte[] commonByteArrayLock_TRAB_FINAL_Curated_DS_Data = new byte[0];
    static byte[] commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int AddressID;

				public int getAddressID () {
					return this.AddressID;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String StateProvince;

				public String getStateProvince () {
					return this.StateProvince;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.AddressID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row10Struct other = (row10Struct) obj;
		
						if (this.AddressID != other.AddressID)
							return false;
					

		return true;
    }

	public void copyDataTo(row10Struct other) {

		other.AddressID = this.AddressID;
	            other.City = this.City;
	            other.StateProvince = this.StateProvince;
	            other.CountryRegion = this.CountryRegion;
	            
	}

	public void copyKeysDataTo(row10Struct other) {

		other.AddressID = this.AddressID;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TRAB_FINAL_Curated_DS_Data) {

        	try {

        		int length = 0;
		
			        this.AddressID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AddressID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.City = readString(dis,ois);
					
						this.StateProvince = readString(dis,ois);
					
						this.CountryRegion = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.City, dos, oos);
					
						writeString(this.StateProvince, dos, oos);
					
						writeString(this.CountryRegion, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AddressID="+String.valueOf(AddressID));
		sb.append(",City="+City);
		sb.append(",StateProvince="+StateProvince);
		sb.append(",CountryRegion="+CountryRegion);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AddressID, other.AddressID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_TRAB_FINAL_Curated_DS_Data = new byte[0];
    static byte[] commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int AddressID;

				public int getAddressID () {
					return this.AddressID;
				}
				
			    public String AddressLine1;

				public String getAddressLine1 () {
					return this.AddressLine1;
				}
				
			    public String AddressLine2;

				public String getAddressLine2 () {
					return this.AddressLine2;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String StateProvince;

				public String getStateProvince () {
					return this.StateProvince;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public String PostalCode;

				public String getPostalCode () {
					return this.PostalCode;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.AddressID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.AddressID != other.AddressID)
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.AddressID = this.AddressID;
	            other.AddressLine1 = this.AddressLine1;
	            other.AddressLine2 = this.AddressLine2;
	            other.City = this.City;
	            other.StateProvince = this.StateProvince;
	            other.CountryRegion = this.CountryRegion;
	            other.PostalCode = this.PostalCode;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.AddressID = this.AddressID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TRAB_FINAL_Curated_DS_Data.length) {
				if(length < 1024 && commonByteArray_TRAB_FINAL_Curated_DS_Data.length == 0) {
   					commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[1024];
				} else {
   					commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TRAB_FINAL_Curated_DS_Data, 0, length);
			strReturn = new String(commonByteArray_TRAB_FINAL_Curated_DS_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TRAB_FINAL_Curated_DS_Data) {

        	try {

        		int length = 0;
		
			        this.AddressID = dis.readInt();
					
					this.AddressLine1 = readString(dis);
					
					this.AddressLine2 = readString(dis);
					
					this.City = readString(dis);
					
					this.StateProvince = readString(dis);
					
					this.CountryRegion = readString(dis);
					
					this.PostalCode = readString(dis);
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AddressID);
					
					// String
				
						writeString(this.AddressLine1,dos);
					
					// String
				
						writeString(this.AddressLine2,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.StateProvince,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
					// String
				
						writeString(this.PostalCode,dos);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AddressID="+String.valueOf(AddressID));
		sb.append(",AddressLine1="+AddressLine1);
		sb.append(",AddressLine2="+AddressLine2);
		sb.append(",City="+City);
		sb.append(",StateProvince="+StateProvince);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",PostalCode="+PostalCode);
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AddressID, other.AddressID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
row10Struct row10 = new row10Struct();





	
	/**
	 * [tAdvancedHash_row10 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row10", false);
		start_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tAdvancedHash_row10 = 0;
		

			   		// connection name:row10
			   		// source node:tFilterColumns_6 - inputs:(row7) outputs:(row10,row10) | target node:tAdvancedHash_row10 - inputs:(row10) outputs:()
			   		// linked node: tMap_1 - inputs:(row2,row4,row8,row9,row10,row11,row13) outputs:(out1,out2,out3)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row10Struct>getLookup(matchingModeEnum_row10);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row10 begin ] stop
 */



	
	/**
	 * [tFilterColumns_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterColumns_6", false);
		start_Hash.put("tFilterColumns_6", System.currentTimeMillis());
		
	
	currentComponent="tFilterColumns_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tFilterColumns_6 = 0;
		


 int nb_line_tFilterColumns_6 = 0;
 



/**
 * [tFilterColumns_6 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_6", false);
		start_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_6";

	
		int tos_count_tFileInputDelimited_6 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_6 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_6 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_6 = null;
				int limit_tFileInputDelimited_6 = -1;
				try{
					
						Object filename_tFileInputDelimited_6 = context.LocalPath+context.Address_Harmonized;
						if(filename_tFileInputDelimited_6 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_6 = 0, random_value_tFileInputDelimited_6 = -1;
			if(footer_value_tFileInputDelimited_6 >0 || random_value_tFileInputDelimited_6 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_6 = new org.talend.fileprocess.FileInputDelimited(context.LocalPath+context.Address_Harmonized, "UTF-8",";","\n",true,1,0,
									limit_tFileInputDelimited_6
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_6!=null && fid_tFileInputDelimited_6.nextRecord()) {
						rowstate_tFileInputDelimited_6.reset();
						
			    						row7 = null;			
												
									boolean whetherReject_tFileInputDelimited_6 = false;
									row7 = new row7Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_6 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_6 = 0;
					
						temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						if(temp.length() > 0) {
							
								try {
								
    								row7.AddressID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_6) {
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"AddressID", "row7", temp, ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
								}
    							
						} else {						
							
								
								try {
									row7.AddressID = 0;
								} catch(java.lang.Exception ex_tFileInputDelimited_6) {
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't set default value for column '%s' in '%s'. Details: %s",
										"AddressID", "row7", ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
								}
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_6 = 1;
					
							row7.AddressLine1 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 2;
					
							row7.AddressLine2 = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 3;
					
							row7.City = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 4;
					
							row7.StateProvince = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 5;
					
							row7.CountryRegion = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 6;
					
							row7.PostalCode = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 7;
					
						temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						if(temp.length() > 0) {
							
								try {
								
    									row7.ModifiedDate = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd'T'HH:mm:ss");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_6) {
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ModifiedDate", "row7", temp, ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
								}
    							
						} else {						
							
								
									row7.ModifiedDate = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_6.getException()!=null) {
											throw rowstate_tFileInputDelimited_6.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_6 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row7 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_6 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 


	tos_count_tFileInputDelimited_6++;

/**
 * [tFileInputDelimited_6 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 process_data_begin ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tFilterColumns_6 main ] start
	 */

	

	
	
	currentComponent="tFilterColumns_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row7");
					}
					
	

	row10.AddressID = row7.AddressID;

	
	row10.City = row7.City;

	
	row10.StateProvince = row7.StateProvince;

	
	row10.CountryRegion = row7.CountryRegion;

	
    nb_line_tFilterColumns_6++;

 


	tos_count_tFilterColumns_6++;

/**
 * [tFilterColumns_6 main ] stop
 */
	
	/**
	 * [tFilterColumns_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterColumns_6";

	

 



/**
 * [tFilterColumns_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row10");
					}
					


			   
			   

					row10Struct row10_HashRow = new row10Struct();
		   	   	   
				
				row10_HashRow.AddressID = row10.AddressID;
				
				row10_HashRow.City = row10.City;
				
				row10_HashRow.StateProvince = row10.StateProvince;
				
				row10_HashRow.CountryRegion = row10.CountryRegion;
				
			tHash_Lookup_row10.put(row10_HashRow);
			
            




 


	tos_count_tAdvancedHash_row10++;

/**
 * [tAdvancedHash_row10 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

 



/**
 * [tAdvancedHash_row10 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row10 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

 



/**
 * [tAdvancedHash_row10 process_data_end ] stop
 */



	
	/**
	 * [tFilterColumns_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterColumns_6";

	

 



/**
 * [tFilterColumns_6 process_data_end ] stop
 */

} // End of branch "row7"




	
	/**
	 * [tFileInputDelimited_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	



            }
            }finally{
                if(!((Object)(context.LocalPath+context.Address_Harmonized) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_6!=null){
                		fid_tFileInputDelimited_6.close();
                	}
                }
                if(fid_tFileInputDelimited_6!=null){
                	globalMap.put("tFileInputDelimited_6_NB_LINE", fid_tFileInputDelimited_6.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_6", true);
end_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());




/**
 * [tFileInputDelimited_6 end ] stop
 */

	
	/**
	 * [tFilterColumns_6 end ] start
	 */

	

	
	
	currentComponent="tFilterColumns_6";

	

globalMap.put("tFilterColumns_6_NB_LINE",nb_line_tFilterColumns_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tFilterColumns_6", true);
end_Hash.put("tFilterColumns_6", System.currentTimeMillis());




/**
 * [tFilterColumns_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

tHash_Lookup_row10.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row10", true);
end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());




/**
 * [tAdvancedHash_row10 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_6 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 finally ] stop
 */

	
	/**
	 * [tFilterColumns_6 finally ] start
	 */

	

	
	
	currentComponent="tFilterColumns_6";

	

 



/**
 * [tFilterColumns_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

 



/**
 * [tAdvancedHash_row10 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableComparableLookupRow<row11Struct> {
    final static byte[] commonByteArrayLock_TRAB_FINAL_Curated_DS_Data = new byte[0];
    static byte[] commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ProductID;

				public int getProductID () {
					return this.ProductID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String ProductNumber;

				public String getProductNumber () {
					return this.ProductNumber;
				}
				
			    public String Color;

				public String getColor () {
					return this.Color;
				}
				
			    public double ListPrice;

				public double getListPrice () {
					return this.ListPrice;
				}
				
			    public String Size;

				public String getSize () {
					return this.Size;
				}
				
			    public BigDecimal Weight;

				public BigDecimal getWeight () {
					return this.Weight;
				}
				
			    public Integer ProductCategoryID;

				public Integer getProductCategoryID () {
					return this.ProductCategoryID;
				}
				
			    public String ProductModelID;

				public String getProductModelID () {
					return this.ProductModelID;
				}
				
			    public java.util.Date DiscontinuedDate;

				public java.util.Date getDiscontinuedDate () {
					return this.DiscontinuedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ProductID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row11Struct other = (row11Struct) obj;
		
						if (this.ProductID != other.ProductID)
							return false;
					

		return true;
    }

	public void copyDataTo(row11Struct other) {

		other.ProductID = this.ProductID;
	            other.Name = this.Name;
	            other.ProductNumber = this.ProductNumber;
	            other.Color = this.Color;
	            other.ListPrice = this.ListPrice;
	            other.Size = this.Size;
	            other.Weight = this.Weight;
	            other.ProductCategoryID = this.ProductCategoryID;
	            other.ProductModelID = this.ProductModelID;
	            other.DiscontinuedDate = this.DiscontinuedDate;
	            
	}

	public void copyKeysDataTo(row11Struct other) {

		other.ProductID = this.ProductID;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TRAB_FINAL_Curated_DS_Data) {

        	try {

        		int length = 0;
		
			        this.ProductID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Name = readString(dis,ois);
					
						this.ProductNumber = readString(dis,ois);
					
						this.Color = readString(dis,ois);
					
			            this.ListPrice = dis.readDouble();
					
						this.Size = readString(dis,ois);
					
       			    	this.Weight = (BigDecimal) ois.readObject();
					
						this.ProductCategoryID = readInteger(dis,ois);
					
						this.ProductModelID = readString(dis,ois);
					
						this.DiscontinuedDate = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Name, dos, oos);
					
						writeString(this.ProductNumber, dos, oos);
					
						writeString(this.Color, dos, oos);
					
		            	dos.writeDouble(this.ListPrice);
					
						writeString(this.Size, dos, oos);
					
       			    	oos.writeObject(this.Weight);
					
					writeInteger(this.ProductCategoryID, dos, oos);
					
						writeString(this.ProductModelID, dos, oos);
					
						writeDate(this.DiscontinuedDate, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductID="+String.valueOf(ProductID));
		sb.append(",Name="+Name);
		sb.append(",ProductNumber="+ProductNumber);
		sb.append(",Color="+Color);
		sb.append(",ListPrice="+String.valueOf(ListPrice));
		sb.append(",Size="+Size);
		sb.append(",Weight="+String.valueOf(Weight));
		sb.append(",ProductCategoryID="+String.valueOf(ProductCategoryID));
		sb.append(",ProductModelID="+ProductModelID);
		sb.append(",DiscontinuedDate="+String.valueOf(DiscontinuedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ProductID, other.ProductID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_TRAB_FINAL_Curated_DS_Data = new byte[0];
    static byte[] commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[0];

	
			    public int ProductID;

				public int getProductID () {
					return this.ProductID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String ProductNumber;

				public String getProductNumber () {
					return this.ProductNumber;
				}
				
			    public String Color;

				public String getColor () {
					return this.Color;
				}
				
			    public Double StandardCost;

				public Double getStandardCost () {
					return this.StandardCost;
				}
				
			    public double ListPrice;

				public double getListPrice () {
					return this.ListPrice;
				}
				
			    public String Size;

				public String getSize () {
					return this.Size;
				}
				
			    public BigDecimal Weight;

				public BigDecimal getWeight () {
					return this.Weight;
				}
				
			    public Integer ProductCategoryID;

				public Integer getProductCategoryID () {
					return this.ProductCategoryID;
				}
				
			    public String ProductModelID;

				public String getProductModelID () {
					return this.ProductModelID;
				}
				
			    public java.util.Date SellStartDate;

				public java.util.Date getSellStartDate () {
					return this.SellStartDate;
				}
				
			    public java.util.Date SellEndDate;

				public java.util.Date getSellEndDate () {
					return this.SellEndDate;
				}
				
			    public java.util.Date DiscontinuedDate;

				public java.util.Date getDiscontinuedDate () {
					return this.DiscontinuedDate;
				}
				
			    public Object ThumbNailPhoto;

				public Object getThumbNailPhoto () {
					return this.ThumbNailPhoto;
				}
				
			    public String ThumbnailPhotoFileName;

				public String getThumbnailPhotoFileName () {
					return this.ThumbnailPhotoFileName;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TRAB_FINAL_Curated_DS_Data.length) {
				if(length < 1024 && commonByteArray_TRAB_FINAL_Curated_DS_Data.length == 0) {
   					commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[1024];
				} else {
   					commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TRAB_FINAL_Curated_DS_Data, 0, length);
			strReturn = new String(commonByteArray_TRAB_FINAL_Curated_DS_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TRAB_FINAL_Curated_DS_Data) {

        	try {

        		int length = 0;
		
			        this.ProductID = dis.readInt();
					
					this.Name = readString(dis);
					
					this.ProductNumber = readString(dis);
					
					this.Color = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.StandardCost = null;
           				} else {
           			    	this.StandardCost = dis.readDouble();
           				}
					
			        this.ListPrice = dis.readDouble();
					
					this.Size = readString(dis);
					
						this.Weight = (BigDecimal) dis.readObject();
					
						this.ProductCategoryID = readInteger(dis);
					
					this.ProductModelID = readString(dis);
					
					this.SellStartDate = readDate(dis);
					
					this.SellEndDate = readDate(dis);
					
					this.DiscontinuedDate = readDate(dis);
					
						this.ThumbNailPhoto = (Object) dis.readObject();
					
					this.ThumbnailPhotoFileName = readString(dis);
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductID);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.ProductNumber,dos);
					
					// String
				
						writeString(this.Color,dos);
					
					// Double
				
						if(this.StandardCost == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.StandardCost);
		            	}
					
					// double
				
		            	dos.writeDouble(this.ListPrice);
					
					// String
				
						writeString(this.Size,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Weight);
					
					// Integer
				
						writeInteger(this.ProductCategoryID,dos);
					
					// String
				
						writeString(this.ProductModelID,dos);
					
					// java.util.Date
				
						writeDate(this.SellStartDate,dos);
					
					// java.util.Date
				
						writeDate(this.SellEndDate,dos);
					
					// java.util.Date
				
						writeDate(this.DiscontinuedDate,dos);
					
					// Object
				
       			    	dos.writeObject(this.ThumbNailPhoto);
					
					// String
				
						writeString(this.ThumbnailPhotoFileName,dos);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductID="+String.valueOf(ProductID));
		sb.append(",Name="+Name);
		sb.append(",ProductNumber="+ProductNumber);
		sb.append(",Color="+Color);
		sb.append(",StandardCost="+String.valueOf(StandardCost));
		sb.append(",ListPrice="+String.valueOf(ListPrice));
		sb.append(",Size="+Size);
		sb.append(",Weight="+String.valueOf(Weight));
		sb.append(",ProductCategoryID="+String.valueOf(ProductCategoryID));
		sb.append(",ProductModelID="+ProductModelID);
		sb.append(",SellStartDate="+String.valueOf(SellStartDate));
		sb.append(",SellEndDate="+String.valueOf(SellEndDate));
		sb.append(",DiscontinuedDate="+String.valueOf(DiscontinuedDate));
		sb.append(",ThumbNailPhoto="+String.valueOf(ThumbNailPhoto));
		sb.append(",ThumbnailPhotoFileName="+ThumbnailPhotoFileName);
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();
row11Struct row11 = new row11Struct();





	
	/**
	 * [tAdvancedHash_row11 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row11", false);
		start_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tAdvancedHash_row11 = 0;
		

			   		// connection name:row11
			   		// source node:tFilterColumns_7 - inputs:(row12) outputs:(row11,row11) | target node:tAdvancedHash_row11 - inputs:(row11) outputs:()
			   		// linked node: tMap_1 - inputs:(row2,row4,row8,row9,row10,row11,row13) outputs:(out1,out2,out3)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row11 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row11Struct>getLookup(matchingModeEnum_row11);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row11", tHash_Lookup_row11);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row11 begin ] stop
 */



	
	/**
	 * [tFilterColumns_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterColumns_7", false);
		start_Hash.put("tFilterColumns_7", System.currentTimeMillis());
		
	
	currentComponent="tFilterColumns_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tFilterColumns_7 = 0;
		


 int nb_line_tFilterColumns_7 = 0;
 



/**
 * [tFilterColumns_7 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_7", false);
		start_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_7";

	
		int tos_count_tFileInputDelimited_7 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_7 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_7 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_7 = null;
				int limit_tFileInputDelimited_7 = -1;
				try{
					
						Object filename_tFileInputDelimited_7 = context.LocalPath+context.Product_Harmonized;
						if(filename_tFileInputDelimited_7 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_7 = 0, random_value_tFileInputDelimited_7 = -1;
			if(footer_value_tFileInputDelimited_7 >0 || random_value_tFileInputDelimited_7 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_7 = new org.talend.fileprocess.FileInputDelimited(context.LocalPath+context.Product_Harmonized, "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_7
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_7!=null && fid_tFileInputDelimited_7.nextRecord()) {
						rowstate_tFileInputDelimited_7.reset();
						
			    						row12 = null;			
												
									boolean whetherReject_tFileInputDelimited_7 = false;
									row12 = new row12Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_7 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_7 = 0;
					
						temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						if(temp.length() > 0) {
							
								try {
								
    								row12.ProductID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_7) {
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductID", "row12", temp, ex_tFileInputDelimited_7), ex_tFileInputDelimited_7));
								}
    							
						} else {						
							
								
								try {
									row12.ProductID = 0;
								} catch(java.lang.Exception ex_tFileInputDelimited_7) {
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format("Couldn't set default value for column '%s' in '%s'. Details: %s",
										"ProductID", "row12", ex_tFileInputDelimited_7), ex_tFileInputDelimited_7));
								}
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_7 = 1;
					
							row12.Name = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						
				
					columnIndexWithD_tFileInputDelimited_7 = 2;
					
							row12.ProductNumber = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						
				
					columnIndexWithD_tFileInputDelimited_7 = 3;
					
							row12.Color = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						
				
					columnIndexWithD_tFileInputDelimited_7 = 4;
					
						temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						if(temp.length() > 0) {
							
								try {
								
    								row12.StandardCost = ParserUtils.parseTo_Double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_7) {
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"StandardCost", "row12", temp, ex_tFileInputDelimited_7), ex_tFileInputDelimited_7));
								}
    							
						} else {						
							
								
									row12.StandardCost = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_7 = 5;
					
						temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						if(temp.length() > 0) {
							
								try {
								
    								row12.ListPrice = ParserUtils.parseTo_double(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_7) {
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ListPrice", "row12", temp, ex_tFileInputDelimited_7), ex_tFileInputDelimited_7));
								}
    							
						} else {						
							
								
								try {
									row12.ListPrice = 0;
								} catch(java.lang.Exception ex_tFileInputDelimited_7) {
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format("Couldn't set default value for column '%s' in '%s'. Details: %s",
										"ListPrice", "row12", ex_tFileInputDelimited_7), ex_tFileInputDelimited_7));
								}
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_7 = 6;
					
							row12.Size = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						
				
					columnIndexWithD_tFileInputDelimited_7 = 7;
					
						temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						if(temp.length() > 0) {
							
								try {
								
    								row12.Weight = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_7) {
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Weight", "row12", temp, ex_tFileInputDelimited_7), ex_tFileInputDelimited_7));
								}
    							
						} else {						
							
								
									row12.Weight = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_7 = 8;
					
						temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						if(temp.length() > 0) {
							
								try {
								
    								row12.ProductCategoryID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_7) {
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductCategoryID", "row12", temp, ex_tFileInputDelimited_7), ex_tFileInputDelimited_7));
								}
    							
						} else {						
							
								
									row12.ProductCategoryID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_7 = 9;
					
							row12.ProductModelID = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						
				
					columnIndexWithD_tFileInputDelimited_7 = 10;
					
						temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						if(temp.length() > 0) {
							
								try {
								
    									row12.SellStartDate = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd'T'HH:mm:ss");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_7) {
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"SellStartDate", "row12", temp, ex_tFileInputDelimited_7), ex_tFileInputDelimited_7));
								}
    							
						} else {						
							
								
									row12.SellStartDate = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_7 = 11;
					
						temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						if(temp.length() > 0) {
							
								try {
								
    									row12.SellEndDate = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd'T'HH:mm:ss");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_7) {
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"SellEndDate", "row12", temp, ex_tFileInputDelimited_7), ex_tFileInputDelimited_7));
								}
    							
						} else {						
							
								
									row12.SellEndDate = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_7 = 12;
					
						temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						if(temp.length() > 0) {
							
								try {
								
    									row12.DiscontinuedDate = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd'T'HH:mm:ss");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_7) {
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"DiscontinuedDate", "row12", temp, ex_tFileInputDelimited_7), ex_tFileInputDelimited_7));
								}
    							
						} else {						
							
								
									row12.DiscontinuedDate = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_7 = 13;
					
							row12.ThumbNailPhoto = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						
				
					columnIndexWithD_tFileInputDelimited_7 = 14;
					
							row12.ThumbnailPhotoFileName = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						
				
					columnIndexWithD_tFileInputDelimited_7 = 15;
					
						temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						if(temp.length() > 0) {
							
								try {
								
    									row12.ModifiedDate = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd'T'HH:mm:ss");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_7) {
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ModifiedDate", "row12", temp, ex_tFileInputDelimited_7), ex_tFileInputDelimited_7));
								}
    							
						} else {						
							
								
									row12.ModifiedDate = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_7.getException()!=null) {
											throw rowstate_tFileInputDelimited_7.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_7 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row12 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_7 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_7 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 


	tos_count_tFileInputDelimited_7++;

/**
 * [tFileInputDelimited_7 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 



/**
 * [tFileInputDelimited_7 process_data_begin ] stop
 */
// Start of branch "row12"
if(row12 != null) { 



	
	/**
	 * [tFilterColumns_7 main ] start
	 */

	

	
	
	currentComponent="tFilterColumns_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row12");
					}
					
	

	row11.ProductID = row12.ProductID;

	
	row11.Name = row12.Name;

	
	row11.ProductNumber = row12.ProductNumber;

	
	row11.Color = row12.Color;

	
	row11.ListPrice = row12.ListPrice;

	
	row11.Size = row12.Size;

	
	row11.Weight = row12.Weight;

	
	row11.ProductCategoryID = row12.ProductCategoryID;

	
	row11.ProductModelID = row12.ProductModelID;

	
	row11.DiscontinuedDate = row12.DiscontinuedDate;

	
    nb_line_tFilterColumns_7++;

 


	tos_count_tFilterColumns_7++;

/**
 * [tFilterColumns_7 main ] stop
 */
	
	/**
	 * [tFilterColumns_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterColumns_7";

	

 



/**
 * [tFilterColumns_7 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row11");
					}
					


			   
			   

					row11Struct row11_HashRow = new row11Struct();
		   	   	   
				
				row11_HashRow.ProductID = row11.ProductID;
				
				row11_HashRow.Name = row11.Name;
				
				row11_HashRow.ProductNumber = row11.ProductNumber;
				
				row11_HashRow.Color = row11.Color;
				
				row11_HashRow.ListPrice = row11.ListPrice;
				
				row11_HashRow.Size = row11.Size;
				
				row11_HashRow.Weight = row11.Weight;
				
				row11_HashRow.ProductCategoryID = row11.ProductCategoryID;
				
				row11_HashRow.ProductModelID = row11.ProductModelID;
				
				row11_HashRow.DiscontinuedDate = row11.DiscontinuedDate;
				
			tHash_Lookup_row11.put(row11_HashRow);
			
            




 


	tos_count_tAdvancedHash_row11++;

/**
 * [tAdvancedHash_row11 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

 



/**
 * [tAdvancedHash_row11 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row11 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

 



/**
 * [tAdvancedHash_row11 process_data_end ] stop
 */



	
	/**
	 * [tFilterColumns_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterColumns_7";

	

 



/**
 * [tFilterColumns_7 process_data_end ] stop
 */

} // End of branch "row12"




	
	/**
	 * [tFileInputDelimited_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 



/**
 * [tFileInputDelimited_7 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_7 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	



            }
            }finally{
                if(!((Object)(context.LocalPath+context.Product_Harmonized) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_7!=null){
                		fid_tFileInputDelimited_7.close();
                	}
                }
                if(fid_tFileInputDelimited_7!=null){
                	globalMap.put("tFileInputDelimited_7_NB_LINE", fid_tFileInputDelimited_7.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_7", true);
end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());




/**
 * [tFileInputDelimited_7 end ] stop
 */

	
	/**
	 * [tFilterColumns_7 end ] start
	 */

	

	
	
	currentComponent="tFilterColumns_7";

	

globalMap.put("tFilterColumns_7_NB_LINE",nb_line_tFilterColumns_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tFilterColumns_7", true);
end_Hash.put("tFilterColumns_7", System.currentTimeMillis());




/**
 * [tFilterColumns_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

tHash_Lookup_row11.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row11", true);
end_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());




/**
 * [tAdvancedHash_row11 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_7 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 



/**
 * [tFileInputDelimited_7 finally ] stop
 */

	
	/**
	 * [tFilterColumns_7 finally ] start
	 */

	

	
	
	currentComponent="tFilterColumns_7";

	

 



/**
 * [tFilterColumns_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

 



/**
 * [tAdvancedHash_row11 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableComparableLookupRow<row13Struct> {
    final static byte[] commonByteArrayLock_TRAB_FINAL_Curated_DS_Data = new byte[0];
    static byte[] commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ProductModelID;

				public String getProductModelID () {
					return this.ProductModelID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ProductModelID == null) ? 0 : this.ProductModelID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row13Struct other = (row13Struct) obj;
		
						if (this.ProductModelID == null) {
							if (other.ProductModelID != null)
								return false;
						
						} else if (!this.ProductModelID.equals(other.ProductModelID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row13Struct other) {

		other.ProductModelID = this.ProductModelID;
	            other.Name = this.Name;
	            
	}

	public void copyKeysDataTo(row13Struct other) {

		other.ProductModelID = this.ProductModelID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TRAB_FINAL_Curated_DS_Data.length) {
				if(length < 1024 && commonByteArray_TRAB_FINAL_Curated_DS_Data.length == 0) {
   					commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[1024];
				} else {
   					commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TRAB_FINAL_Curated_DS_Data, 0, length);
			strReturn = new String(commonByteArray_TRAB_FINAL_Curated_DS_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TRAB_FINAL_Curated_DS_Data) {

        	try {

        		int length = 0;
		
					this.ProductModelID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ProductModelID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Name = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Name, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductModelID="+ProductModelID);
		sb.append(",Name="+Name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ProductModelID, other.ProductModelID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_TRAB_FINAL_Curated_DS_Data = new byte[0];
    static byte[] commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ProductModelID;

				public String getProductModelID () {
					return this.ProductModelID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ProductModelID == null) ? 0 : this.ProductModelID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row14Struct other = (row14Struct) obj;
		
						if (this.ProductModelID == null) {
							if (other.ProductModelID != null)
								return false;
						
						} else if (!this.ProductModelID.equals(other.ProductModelID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row14Struct other) {

		other.ProductModelID = this.ProductModelID;
	            other.Name = this.Name;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(row14Struct other) {

		other.ProductModelID = this.ProductModelID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TRAB_FINAL_Curated_DS_Data.length) {
				if(length < 1024 && commonByteArray_TRAB_FINAL_Curated_DS_Data.length == 0) {
   					commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[1024];
				} else {
   					commonByteArray_TRAB_FINAL_Curated_DS_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TRAB_FINAL_Curated_DS_Data, 0, length);
			strReturn = new String(commonByteArray_TRAB_FINAL_Curated_DS_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TRAB_FINAL_Curated_DS_Data) {

        	try {

        		int length = 0;
		
					this.ProductModelID = readString(dis);
					
					this.Name = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ProductModelID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductModelID="+ProductModelID);
		sb.append(",Name="+Name);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ProductModelID, other.ProductModelID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();
row13Struct row13 = new row13Struct();





	
	/**
	 * [tAdvancedHash_row13 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row13", false);
		start_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tAdvancedHash_row13 = 0;
		

			   		// connection name:row13
			   		// source node:tFilterColumns_8 - inputs:(row14) outputs:(row13,row13) | target node:tAdvancedHash_row13 - inputs:(row13) outputs:()
			   		// linked node: tMap_1 - inputs:(row2,row4,row8,row9,row10,row11,row13) outputs:(out1,out2,out3)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row13Struct>getLookup(matchingModeEnum_row13);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row13 begin ] stop
 */



	
	/**
	 * [tFilterColumns_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterColumns_8", false);
		start_Hash.put("tFilterColumns_8", System.currentTimeMillis());
		
	
	currentComponent="tFilterColumns_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tFilterColumns_8 = 0;
		


 int nb_line_tFilterColumns_8 = 0;
 



/**
 * [tFilterColumns_8 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_8", false);
		start_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_8";

	
		int tos_count_tFileInputDelimited_8 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_8 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_8 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_8 = null;
				int limit_tFileInputDelimited_8 = -1;
				try{
					
						Object filename_tFileInputDelimited_8 = context.LocalPath+context.ProductModel_Harmonized;
						if(filename_tFileInputDelimited_8 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_8 = 0, random_value_tFileInputDelimited_8 = -1;
			if(footer_value_tFileInputDelimited_8 >0 || random_value_tFileInputDelimited_8 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_8 = new org.talend.fileprocess.FileInputDelimited(context.LocalPath+context.ProductModel_Harmonized, "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_8
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_8!=null && fid_tFileInputDelimited_8.nextRecord()) {
						rowstate_tFileInputDelimited_8.reset();
						
			    						row14 = null;			
												
									boolean whetherReject_tFileInputDelimited_8 = false;
									row14 = new row14Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_8 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_8 = 0;
					
							row14.ProductModelID = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 1;
					
							row14.Name = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 2;
					
							row14.rowguid = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 3;
					
						temp = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						if(temp.length() > 0) {
							
								try {
								
    									row14.ModifiedDate = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd'T'HH:mm:ss");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_8) {
									rowstate_tFileInputDelimited_8.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ModifiedDate", "row14", temp, ex_tFileInputDelimited_8), ex_tFileInputDelimited_8));
								}
    							
						} else {						
							
								
									row14.ModifiedDate = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_8.getException()!=null) {
											throw rowstate_tFileInputDelimited_8.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_8 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row14 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_8 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_8 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	

 


	tos_count_tFileInputDelimited_8++;

/**
 * [tFileInputDelimited_8 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	

 



/**
 * [tFileInputDelimited_8 process_data_begin ] stop
 */
// Start of branch "row14"
if(row14 != null) { 



	
	/**
	 * [tFilterColumns_8 main ] start
	 */

	

	
	
	currentComponent="tFilterColumns_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row14");
					}
					
	

	row13.ProductModelID = row14.ProductModelID;

	
	row13.Name = row14.Name;

	
    nb_line_tFilterColumns_8++;

 


	tos_count_tFilterColumns_8++;

/**
 * [tFilterColumns_8 main ] stop
 */
	
	/**
	 * [tFilterColumns_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterColumns_8";

	

 



/**
 * [tFilterColumns_8 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					


			   
			   

					row13Struct row13_HashRow = new row13Struct();
		   	   	   
				
				row13_HashRow.ProductModelID = row13.ProductModelID;
				
				row13_HashRow.Name = row13.Name;
				
			tHash_Lookup_row13.put(row13_HashRow);
			
            




 


	tos_count_tAdvancedHash_row13++;

/**
 * [tAdvancedHash_row13 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 process_data_end ] stop
 */



	
	/**
	 * [tFilterColumns_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterColumns_8";

	

 



/**
 * [tFilterColumns_8 process_data_end ] stop
 */

} // End of branch "row14"




	
	/**
	 * [tFileInputDelimited_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	

 



/**
 * [tFileInputDelimited_8 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_8 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	



            }
            }finally{
                if(!((Object)(context.LocalPath+context.ProductModel_Harmonized) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_8!=null){
                		fid_tFileInputDelimited_8.close();
                	}
                }
                if(fid_tFileInputDelimited_8!=null){
                	globalMap.put("tFileInputDelimited_8_NB_LINE", fid_tFileInputDelimited_8.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_8", true);
end_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());




/**
 * [tFileInputDelimited_8 end ] stop
 */

	
	/**
	 * [tFilterColumns_8 end ] start
	 */

	

	
	
	currentComponent="tFilterColumns_8";

	

globalMap.put("tFilterColumns_8_NB_LINE",nb_line_tFilterColumns_8);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tFilterColumns_8", true);
end_Hash.put("tFilterColumns_8", System.currentTimeMillis());




/**
 * [tFilterColumns_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

tHash_Lookup_row13.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row13", true);
end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());




/**
 * [tAdvancedHash_row13 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_8 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	

 



/**
 * [tFileInputDelimited_8 finally ] stop
 */

	
	/**
	 * [tFilterColumns_8 finally ] start
	 */

	

	
	
	currentComponent="tFilterColumns_8";

	

 



/**
 * [tFilterColumns_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Linux";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Curated_DS_Data Curated_DS_DataClass = new Curated_DS_Data();

        int exitCode = Curated_DS_DataClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Curated_DS_Data.class.getClassLoader().getResourceAsStream("trab_final/curated_ds_data_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Curated_DS_Data.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("LocalPath", "id_String");
                            context.LocalPath=(String) context.getProperty("LocalPath");
                        context.setContextType("reportBI", "id_String");
                            context.reportBI=(String) context.getProperty("reportBI");
                        context.setContextType("reportDS", "id_String");
                            context.reportDS=(String) context.getProperty("reportDS");
                        context.setContextType("sampleDS", "id_String");
                            context.sampleDS=(String) context.getProperty("sampleDS");
                        context.setContextType("sampleTest", "id_String");
                            context.sampleTest=(String) context.getProperty("sampleTest");
                        context.setContextType("sampleTrain", "id_String");
                            context.sampleTrain=(String) context.getProperty("sampleTrain");
                        context.setContextType("Address_Harmonized", "id_String");
                            context.Address_Harmonized=(String) context.getProperty("Address_Harmonized");
                        context.setContextType("Customer_Harmonized", "id_String");
                            context.Customer_Harmonized=(String) context.getProperty("Customer_Harmonized");
                        context.setContextType("CustomerAddress_Harmonized", "id_String");
                            context.CustomerAddress_Harmonized=(String) context.getProperty("CustomerAddress_Harmonized");
                        context.setContextType("Product_Harmonized", "id_String");
                            context.Product_Harmonized=(String) context.getProperty("Product_Harmonized");
                        context.setContextType("ProductCategory_Harmonized", "id_String");
                            context.ProductCategory_Harmonized=(String) context.getProperty("ProductCategory_Harmonized");
                        context.setContextType("ProductDescription_Harmonized", "id_String");
                            context.ProductDescription_Harmonized=(String) context.getProperty("ProductDescription_Harmonized");
                        context.setContextType("ProductModel_Harmonized", "id_String");
                            context.ProductModel_Harmonized=(String) context.getProperty("ProductModel_Harmonized");
                        context.setContextType("ProductModelProductDescription_Harmonized", "id_String");
                            context.ProductModelProductDescription_Harmonized=(String) context.getProperty("ProductModelProductDescription_Harmonized");
                        context.setContextType("SalesOrderDetail_Harmonized", "id_String");
                            context.SalesOrderDetail_Harmonized=(String) context.getProperty("SalesOrderDetail_Harmonized");
                        context.setContextType("SalesOrderHeader_Harmonized", "id_String");
                            context.SalesOrderHeader_Harmonized=(String) context.getProperty("SalesOrderHeader_Harmonized");
                        context.setContextType("Address_Raw", "id_String");
                            context.Address_Raw=(String) context.getProperty("Address_Raw");
                        context.setContextType("Customer_Raw", "id_String");
                            context.Customer_Raw=(String) context.getProperty("Customer_Raw");
                        context.setContextType("CustomerAddress_Raw", "id_String");
                            context.CustomerAddress_Raw=(String) context.getProperty("CustomerAddress_Raw");
                        context.setContextType("Product_Raw", "id_String");
                            context.Product_Raw=(String) context.getProperty("Product_Raw");
                        context.setContextType("ProductCategory_Raw", "id_String");
                            context.ProductCategory_Raw=(String) context.getProperty("ProductCategory_Raw");
                        context.setContextType("ProductDescription_Raw", "id_String");
                            context.ProductDescription_Raw=(String) context.getProperty("ProductDescription_Raw");
                        context.setContextType("ProductModel_Raw", "id_String");
                            context.ProductModel_Raw=(String) context.getProperty("ProductModel_Raw");
                        context.setContextType("ProductModelProductDescription_Raw", "id_String");
                            context.ProductModelProductDescription_Raw=(String) context.getProperty("ProductModelProductDescription_Raw");
                        context.setContextType("SalesOrderDetail_Raw", "id_String");
                            context.SalesOrderDetail_Raw=(String) context.getProperty("SalesOrderDetail_Raw");
                        context.setContextType("SalesOrderHeader_Raw", "id_String");
                            context.SalesOrderHeader_Raw=(String) context.getProperty("SalesOrderHeader_Raw");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("LocalPath")) {
                context.LocalPath = (String) parentContextMap.get("LocalPath");
            }if (parentContextMap.containsKey("reportBI")) {
                context.reportBI = (String) parentContextMap.get("reportBI");
            }if (parentContextMap.containsKey("reportDS")) {
                context.reportDS = (String) parentContextMap.get("reportDS");
            }if (parentContextMap.containsKey("sampleDS")) {
                context.sampleDS = (String) parentContextMap.get("sampleDS");
            }if (parentContextMap.containsKey("sampleTest")) {
                context.sampleTest = (String) parentContextMap.get("sampleTest");
            }if (parentContextMap.containsKey("sampleTrain")) {
                context.sampleTrain = (String) parentContextMap.get("sampleTrain");
            }if (parentContextMap.containsKey("Address_Harmonized")) {
                context.Address_Harmonized = (String) parentContextMap.get("Address_Harmonized");
            }if (parentContextMap.containsKey("Customer_Harmonized")) {
                context.Customer_Harmonized = (String) parentContextMap.get("Customer_Harmonized");
            }if (parentContextMap.containsKey("CustomerAddress_Harmonized")) {
                context.CustomerAddress_Harmonized = (String) parentContextMap.get("CustomerAddress_Harmonized");
            }if (parentContextMap.containsKey("Product_Harmonized")) {
                context.Product_Harmonized = (String) parentContextMap.get("Product_Harmonized");
            }if (parentContextMap.containsKey("ProductCategory_Harmonized")) {
                context.ProductCategory_Harmonized = (String) parentContextMap.get("ProductCategory_Harmonized");
            }if (parentContextMap.containsKey("ProductDescription_Harmonized")) {
                context.ProductDescription_Harmonized = (String) parentContextMap.get("ProductDescription_Harmonized");
            }if (parentContextMap.containsKey("ProductModel_Harmonized")) {
                context.ProductModel_Harmonized = (String) parentContextMap.get("ProductModel_Harmonized");
            }if (parentContextMap.containsKey("ProductModelProductDescription_Harmonized")) {
                context.ProductModelProductDescription_Harmonized = (String) parentContextMap.get("ProductModelProductDescription_Harmonized");
            }if (parentContextMap.containsKey("SalesOrderDetail_Harmonized")) {
                context.SalesOrderDetail_Harmonized = (String) parentContextMap.get("SalesOrderDetail_Harmonized");
            }if (parentContextMap.containsKey("SalesOrderHeader_Harmonized")) {
                context.SalesOrderHeader_Harmonized = (String) parentContextMap.get("SalesOrderHeader_Harmonized");
            }if (parentContextMap.containsKey("Address_Raw")) {
                context.Address_Raw = (String) parentContextMap.get("Address_Raw");
            }if (parentContextMap.containsKey("Customer_Raw")) {
                context.Customer_Raw = (String) parentContextMap.get("Customer_Raw");
            }if (parentContextMap.containsKey("CustomerAddress_Raw")) {
                context.CustomerAddress_Raw = (String) parentContextMap.get("CustomerAddress_Raw");
            }if (parentContextMap.containsKey("Product_Raw")) {
                context.Product_Raw = (String) parentContextMap.get("Product_Raw");
            }if (parentContextMap.containsKey("ProductCategory_Raw")) {
                context.ProductCategory_Raw = (String) parentContextMap.get("ProductCategory_Raw");
            }if (parentContextMap.containsKey("ProductDescription_Raw")) {
                context.ProductDescription_Raw = (String) parentContextMap.get("ProductDescription_Raw");
            }if (parentContextMap.containsKey("ProductModel_Raw")) {
                context.ProductModel_Raw = (String) parentContextMap.get("ProductModel_Raw");
            }if (parentContextMap.containsKey("ProductModelProductDescription_Raw")) {
                context.ProductModelProductDescription_Raw = (String) parentContextMap.get("ProductModelProductDescription_Raw");
            }if (parentContextMap.containsKey("SalesOrderDetail_Raw")) {
                context.SalesOrderDetail_Raw = (String) parentContextMap.get("SalesOrderDetail_Raw");
            }if (parentContextMap.containsKey("SalesOrderHeader_Raw")) {
                context.SalesOrderHeader_Raw = (String) parentContextMap.get("SalesOrderHeader_Raw");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Curated_DS_Data");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     426757 characters generated by Talend Open Studio for Big Data 
 *     on the 1 de Maio de 2021 20h31min53s BRT
 ************************************************************************************************/